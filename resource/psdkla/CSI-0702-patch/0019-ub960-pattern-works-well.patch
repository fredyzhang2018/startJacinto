From 5508b5fa112b3a8836215a3be8e32b012c5ec238 Mon Sep 17 00:00:00 2001
From: Fredy Zhang <fredyzhang2018@gmail.com>
Date: Mon, 8 Mar 2021 20:37:25 -0500
Subject: [PATCH 19/20] ub960 pattern: works well

---
 .../dts/ti/k3-j721e-common-proc-board.dts     |    3 +-
 drivers/media/i2c/ov5640.c                    | 1231 +++++++++--------
 drivers/media/platform/cadence/cdns-csi2rx.c  |   19 +-
 drivers/media/usb/dvb-usb/cxusb-analog.c      |    2 +
 4 files changed, 647 insertions(+), 608 deletions(-)

diff --git a/arch/arm64/boot/dts/ti/k3-j721e-common-proc-board.dts b/arch/arm64/boot/dts/ti/k3-j721e-common-proc-board.dts
index 7d4b2a7b2..864b848ec 100644
--- a/arch/arm64/boot/dts/ti/k3-j721e-common-proc-board.dts
+++ b/arch/arm64/boot/dts/ti/k3-j721e-common-proc-board.dts
@@ -735,11 +735,10 @@
 
 	ov5640: camera@3c {
 		compatible = "ovti,ov5640";
-		reg = <0x3c>;
+		reg = <0x3d>;
 
 		clocks = <&clk_ov5640_fixed>;
 		clock-names = "xclk";
-		reset-gpios = <&exp5 0 GPIO_ACTIVE_LOW>;
 
 		port {
 			csi2_cam0: endpoint {
diff --git a/drivers/media/i2c/ov5640.c b/drivers/media/i2c/ov5640.c
index 9b986b707..77be5c04a 100644
--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -26,75 +26,75 @@
 #include <media/v4l2-subdev.h>
 
 /* min/typical/max system clock (xclk) frequencies */
-#define OV5640_XCLK_MIN  6000000
+#define OV5640_XCLK_MIN 6000000
 #define OV5640_XCLK_MAX 54000000
 
 #define OV5640_DEFAULT_SLAVE_ID 0x3c
 
-#define OV5640_REG_SYS_RESET02		0x3002
-#define OV5640_REG_SYS_CLOCK_ENABLE02	0x3006
-#define OV5640_REG_SYS_CTRL0		0x3008
-#define OV5640_REG_SYS_CTRL0_SW_PWDN	0x42
-#define OV5640_REG_SYS_CTRL0_SW_PWUP	0x02
-#define OV5640_REG_CHIP_ID		0x300a
-#define OV5640_REG_IO_MIPI_CTRL00	0x300e
-#define OV5640_REG_PAD_OUTPUT_ENABLE01	0x3017
-#define OV5640_REG_PAD_OUTPUT_ENABLE02	0x3018
-#define OV5640_REG_PAD_OUTPUT00		0x3019
-#define OV5640_REG_SYSTEM_CONTROL1	0x302e
-#define OV5640_REG_SC_PLL_CTRL0		0x3034
-#define OV5640_REG_SC_PLL_CTRL1		0x3035
-#define OV5640_REG_SC_PLL_CTRL2		0x3036
-#define OV5640_REG_SC_PLL_CTRL3		0x3037
-#define OV5640_REG_SLAVE_ID		0x3100
-#define OV5640_REG_SCCB_SYS_CTRL1	0x3103
-#define OV5640_REG_SYS_ROOT_DIVIDER	0x3108
-#define OV5640_REG_AWB_R_GAIN		0x3400
-#define OV5640_REG_AWB_G_GAIN		0x3402
-#define OV5640_REG_AWB_B_GAIN		0x3404
-#define OV5640_REG_AWB_MANUAL_CTRL	0x3406
-#define OV5640_REG_AEC_PK_EXPOSURE_HI	0x3500
-#define OV5640_REG_AEC_PK_EXPOSURE_MED	0x3501
-#define OV5640_REG_AEC_PK_EXPOSURE_LO	0x3502
-#define OV5640_REG_AEC_PK_MANUAL	0x3503
-#define OV5640_REG_AEC_PK_REAL_GAIN	0x350a
-#define OV5640_REG_AEC_PK_VTS		0x350c
-#define OV5640_REG_TIMING_DVPHO		0x3808
-#define OV5640_REG_TIMING_DVPVO		0x380a
-#define OV5640_REG_TIMING_HTS		0x380c
-#define OV5640_REG_TIMING_VTS		0x380e
-#define OV5640_REG_TIMING_TC_REG20	0x3820
-#define OV5640_REG_TIMING_TC_REG21	0x3821
-#define OV5640_REG_AEC_CTRL00		0x3a00
-#define OV5640_REG_AEC_B50_STEP		0x3a08
-#define OV5640_REG_AEC_B60_STEP		0x3a0a
-#define OV5640_REG_AEC_CTRL0D		0x3a0d
-#define OV5640_REG_AEC_CTRL0E		0x3a0e
-#define OV5640_REG_AEC_CTRL0F		0x3a0f
-#define OV5640_REG_AEC_CTRL10		0x3a10
-#define OV5640_REG_AEC_CTRL11		0x3a11
-#define OV5640_REG_AEC_CTRL1B		0x3a1b
-#define OV5640_REG_AEC_CTRL1E		0x3a1e
-#define OV5640_REG_AEC_CTRL1F		0x3a1f
-#define OV5640_REG_HZ5060_CTRL00	0x3c00
-#define OV5640_REG_HZ5060_CTRL01	0x3c01
-#define OV5640_REG_SIGMADELTA_CTRL0C	0x3c0c
-#define OV5640_REG_FRAME_CTRL01		0x4202
-#define OV5640_REG_FORMAT_CONTROL00	0x4300
-#define OV5640_REG_VFIFO_HSIZE		0x4602
-#define OV5640_REG_VFIFO_VSIZE		0x4604
-#define OV5640_REG_JPG_MODE_SELECT	0x4713
-#define OV5640_REG_POLARITY_CTRL00	0x4740
-#define OV5640_REG_MIPI_CTRL00		0x4800
-#define OV5640_REG_DEBUG_MODE		0x4814
-#define OV5640_REG_ISP_FORMAT_MUX_CTRL	0x501f
-#define OV5640_REG_PRE_ISP_TEST_SET1	0x503d
-#define OV5640_REG_SDE_CTRL0		0x5580
-#define OV5640_REG_SDE_CTRL1		0x5581
-#define OV5640_REG_SDE_CTRL3		0x5583
-#define OV5640_REG_SDE_CTRL4		0x5584
-#define OV5640_REG_SDE_CTRL5		0x5585
-#define OV5640_REG_AVG_READOUT		0x56a1
+#define OV5640_REG_SYS_RESET02 0x3002
+#define OV5640_REG_SYS_CLOCK_ENABLE02 0x3006
+#define OV5640_REG_SYS_CTRL0 0x3008
+#define OV5640_REG_SYS_CTRL0_SW_PWDN 0x42
+#define OV5640_REG_SYS_CTRL0_SW_PWUP 0x02
+#define OV5640_REG_CHIP_ID 0x300a
+#define OV5640_REG_IO_MIPI_CTRL00 0x300e
+#define OV5640_REG_PAD_OUTPUT_ENABLE01 0x3017
+#define OV5640_REG_PAD_OUTPUT_ENABLE02 0x3018
+#define OV5640_REG_PAD_OUTPUT00 0x3019
+#define OV5640_REG_SYSTEM_CONTROL1 0x302e
+#define OV5640_REG_SC_PLL_CTRL0 0x3034
+#define OV5640_REG_SC_PLL_CTRL1 0x3035
+#define OV5640_REG_SC_PLL_CTRL2 0x3036
+#define OV5640_REG_SC_PLL_CTRL3 0x3037
+#define OV5640_REG_SLAVE_ID 0x3100
+#define OV5640_REG_SCCB_SYS_CTRL1 0x3103
+#define OV5640_REG_SYS_ROOT_DIVIDER 0x3108
+#define OV5640_REG_AWB_R_GAIN 0x3400
+#define OV5640_REG_AWB_G_GAIN 0x3402
+#define OV5640_REG_AWB_B_GAIN 0x3404
+#define OV5640_REG_AWB_MANUAL_CTRL 0x3406
+#define OV5640_REG_AEC_PK_EXPOSURE_HI 0x3500
+#define OV5640_REG_AEC_PK_EXPOSURE_MED 0x3501
+#define OV5640_REG_AEC_PK_EXPOSURE_LO 0x3502
+#define OV5640_REG_AEC_PK_MANUAL 0x3503
+#define OV5640_REG_AEC_PK_REAL_GAIN 0x350a
+#define OV5640_REG_AEC_PK_VTS 0x350c
+#define OV5640_REG_TIMING_DVPHO 0x3808
+#define OV5640_REG_TIMING_DVPVO 0x380a
+#define OV5640_REG_TIMING_HTS 0x380c
+#define OV5640_REG_TIMING_VTS 0x380e
+#define OV5640_REG_TIMING_TC_REG20 0x3820
+#define OV5640_REG_TIMING_TC_REG21 0x3821
+#define OV5640_REG_AEC_CTRL00 0x3a00
+#define OV5640_REG_AEC_B50_STEP 0x3a08
+#define OV5640_REG_AEC_B60_STEP 0x3a0a
+#define OV5640_REG_AEC_CTRL0D 0x3a0d
+#define OV5640_REG_AEC_CTRL0E 0x3a0e
+#define OV5640_REG_AEC_CTRL0F 0x3a0f
+#define OV5640_REG_AEC_CTRL10 0x3a10
+#define OV5640_REG_AEC_CTRL11 0x3a11
+#define OV5640_REG_AEC_CTRL1B 0x3a1b
+#define OV5640_REG_AEC_CTRL1E 0x3a1e
+#define OV5640_REG_AEC_CTRL1F 0x3a1f
+#define OV5640_REG_HZ5060_CTRL00 0x3c00
+#define OV5640_REG_HZ5060_CTRL01 0x3c01
+#define OV5640_REG_SIGMADELTA_CTRL0C 0x3c0c
+#define OV5640_REG_FRAME_CTRL01 0x4202
+#define OV5640_REG_FORMAT_CONTROL00 0x4300
+#define OV5640_REG_VFIFO_HSIZE 0x4602
+#define OV5640_REG_VFIFO_VSIZE 0x4604
+#define OV5640_REG_JPG_MODE_SELECT 0x4713
+#define OV5640_REG_POLARITY_CTRL00 0x4740
+#define OV5640_REG_MIPI_CTRL00 0x4800
+#define OV5640_REG_DEBUG_MODE 0x4814
+#define OV5640_REG_ISP_FORMAT_MUX_CTRL 0x501f
+#define OV5640_REG_PRE_ISP_TEST_SET1 0x503d
+#define OV5640_REG_SDE_CTRL0 0x5580
+#define OV5640_REG_SDE_CTRL1 0x5581
+#define OV5640_REG_SDE_CTRL3 0x5583
+#define OV5640_REG_SDE_CTRL4 0x5584
+#define OV5640_REG_SDE_CTRL5 0x5585
+#define OV5640_REG_AVG_READOUT 0x56a1
 
 enum ov5640_mode_id {
 	OV5640_MODE_QCIF_176_144 = 0,
@@ -131,15 +131,42 @@ struct ov5640_pixfmt {
 };
 
 static const struct ov5640_pixfmt ov5640_formats[] = {
-	{ MEDIA_BUS_FMT_JPEG_1X8, V4L2_COLORSPACE_JPEG, },
-	{ MEDIA_BUS_FMT_UYVY8_2X8, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_YUYV8_2X8, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_RGB565_2X8_LE, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_RGB565_2X8_BE, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_SBGGR8_1X8, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_SGBRG8_1X8, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_SGRBG8_1X8, V4L2_COLORSPACE_SRGB, },
-	{ MEDIA_BUS_FMT_SRGGB8_1X8, V4L2_COLORSPACE_SRGB, },
+	{
+		MEDIA_BUS_FMT_JPEG_1X8,
+		V4L2_COLORSPACE_JPEG,
+	},
+	{
+		MEDIA_BUS_FMT_UYVY8_2X8,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_YUYV8_2X8,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_RGB565_2X8_LE,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_RGB565_2X8_BE,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_SBGGR8_1X8,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_SGBRG8_1X8,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_SGRBG8_1X8,
+		V4L2_COLORSPACE_SRGB,
+	},
+	{
+		MEDIA_BUS_FMT_SRGGB8_1X8,
+		V4L2_COLORSPACE_SRGB,
+	},
 };
 
 /*
@@ -158,10 +185,10 @@ static const int ov5640_framerates[] = {
 };
 
 /* regulator supplies */
-static const char * const ov5640_supply_name[] = {
+static const char *const ov5640_supply_name[] = {
 	"DOVDD", /* Digital I/O (1.8V) supply */
-	"AVDD",  /* Analog (2.8V) supply */
-	"DVDD",  /* Digital Core (1.5V) supply */
+	"AVDD", /* Analog (2.8V) supply */
+	"DVDD", /* Digital Core (1.5V) supply */
 };
 
 #define OV5640_NUM_SUPPLIES ARRAY_SIZE(ov5640_supply_name)
@@ -230,7 +257,7 @@ struct ov5640_dev {
 	struct regulator_bulk_data supplies[OV5640_NUM_SUPPLIES];
 	struct gpio_desc *reset_gpio;
 	struct gpio_desc *pwdn_gpio;
-	bool   upside_down;
+	bool upside_down;
 
 	/* lock to protect all members below */
 	struct mutex lock;
@@ -261,8 +288,8 @@ static inline struct ov5640_dev *to_ov5640_dev(struct v4l2_subdev *sd)
 
 static inline struct v4l2_subdev *ctrl_to_sd(struct v4l2_ctrl *ctrl)
 {
-	return &container_of(ctrl->handler, struct ov5640_dev,
-			     ctrls.handler)->sd;
+	return &container_of(ctrl->handler, struct ov5640_dev, ctrls.handler)
+			->sd;
 }
 
 /*
@@ -274,317 +301,328 @@ static inline struct v4l2_subdev *ctrl_to_sd(struct v4l2_ctrl *ctrl)
  */
 /* YUV422 UYVY VGA@30fps */
 static const struct reg_value ov5640_init_setting_30fps_VGA[] = {
-	{0x3103, 0x11, 0, 0}, {0x3008, 0x82, 0, 5}, {0x3008, 0x42, 0, 0},
-	{0x3103, 0x03, 0, 0}, {0x3630, 0x36, 0, 0},
-	{0x3631, 0x0e, 0, 0}, {0x3632, 0xe2, 0, 0}, {0x3633, 0x12, 0, 0},
-	{0x3621, 0xe0, 0, 0}, {0x3704, 0xa0, 0, 0}, {0x3703, 0x5a, 0, 0},
-	{0x3715, 0x78, 0, 0}, {0x3717, 0x01, 0, 0}, {0x370b, 0x60, 0, 0},
-	{0x3705, 0x1a, 0, 0}, {0x3905, 0x02, 0, 0}, {0x3906, 0x10, 0, 0},
-	{0x3901, 0x0a, 0, 0}, {0x3731, 0x12, 0, 0}, {0x3600, 0x08, 0, 0},
-	{0x3601, 0x33, 0, 0}, {0x302d, 0x60, 0, 0}, {0x3620, 0x52, 0, 0},
-	{0x371b, 0x20, 0, 0}, {0x471c, 0x50, 0, 0}, {0x3a13, 0x43, 0, 0},
-	{0x3a18, 0x00, 0, 0}, {0x3a19, 0xf8, 0, 0}, {0x3635, 0x13, 0, 0},
-	{0x3636, 0x03, 0, 0}, {0x3634, 0x40, 0, 0}, {0x3622, 0x01, 0, 0},
-	{0x3c01, 0xa4, 0, 0}, {0x3c04, 0x28, 0, 0}, {0x3c05, 0x98, 0, 0},
-	{0x3c06, 0x00, 0, 0}, {0x3c07, 0x08, 0, 0}, {0x3c08, 0x00, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0}, {0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x06, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0}, {0x3000, 0x00, 0, 0},
-	{0x3002, 0x1c, 0, 0}, {0x3004, 0xff, 0, 0}, {0x3006, 0xc3, 0, 0},
-	{0x302e, 0x08, 0, 0}, {0x4300, 0x3f, 0, 0},
-	{0x501f, 0x00, 0, 0}, {0x4407, 0x04, 0, 0},
-	{0x440e, 0x00, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x4837, 0x0a, 0, 0}, {0x3824, 0x02, 0, 0},
-	{0x5000, 0xa7, 0, 0}, {0x5001, 0xa3, 0, 0}, {0x5180, 0xff, 0, 0},
-	{0x5181, 0xf2, 0, 0}, {0x5182, 0x00, 0, 0}, {0x5183, 0x14, 0, 0},
-	{0x5184, 0x25, 0, 0}, {0x5185, 0x24, 0, 0}, {0x5186, 0x09, 0, 0},
-	{0x5187, 0x09, 0, 0}, {0x5188, 0x09, 0, 0}, {0x5189, 0x88, 0, 0},
-	{0x518a, 0x54, 0, 0}, {0x518b, 0xee, 0, 0}, {0x518c, 0xb2, 0, 0},
-	{0x518d, 0x50, 0, 0}, {0x518e, 0x34, 0, 0}, {0x518f, 0x6b, 0, 0},
-	{0x5190, 0x46, 0, 0}, {0x5191, 0xf8, 0, 0}, {0x5192, 0x04, 0, 0},
-	{0x5193, 0x70, 0, 0}, {0x5194, 0xf0, 0, 0}, {0x5195, 0xf0, 0, 0},
-	{0x5196, 0x03, 0, 0}, {0x5197, 0x01, 0, 0}, {0x5198, 0x04, 0, 0},
-	{0x5199, 0x6c, 0, 0}, {0x519a, 0x04, 0, 0}, {0x519b, 0x00, 0, 0},
-	{0x519c, 0x09, 0, 0}, {0x519d, 0x2b, 0, 0}, {0x519e, 0x38, 0, 0},
-	{0x5381, 0x1e, 0, 0}, {0x5382, 0x5b, 0, 0}, {0x5383, 0x08, 0, 0},
-	{0x5384, 0x0a, 0, 0}, {0x5385, 0x7e, 0, 0}, {0x5386, 0x88, 0, 0},
-	{0x5387, 0x7c, 0, 0}, {0x5388, 0x6c, 0, 0}, {0x5389, 0x10, 0, 0},
-	{0x538a, 0x01, 0, 0}, {0x538b, 0x98, 0, 0}, {0x5300, 0x08, 0, 0},
-	{0x5301, 0x30, 0, 0}, {0x5302, 0x10, 0, 0}, {0x5303, 0x00, 0, 0},
-	{0x5304, 0x08, 0, 0}, {0x5305, 0x30, 0, 0}, {0x5306, 0x08, 0, 0},
-	{0x5307, 0x16, 0, 0}, {0x5309, 0x08, 0, 0}, {0x530a, 0x30, 0, 0},
-	{0x530b, 0x04, 0, 0}, {0x530c, 0x06, 0, 0}, {0x5480, 0x01, 0, 0},
-	{0x5481, 0x08, 0, 0}, {0x5482, 0x14, 0, 0}, {0x5483, 0x28, 0, 0},
-	{0x5484, 0x51, 0, 0}, {0x5485, 0x65, 0, 0}, {0x5486, 0x71, 0, 0},
-	{0x5487, 0x7d, 0, 0}, {0x5488, 0x87, 0, 0}, {0x5489, 0x91, 0, 0},
-	{0x548a, 0x9a, 0, 0}, {0x548b, 0xaa, 0, 0}, {0x548c, 0xb8, 0, 0},
-	{0x548d, 0xcd, 0, 0}, {0x548e, 0xdd, 0, 0}, {0x548f, 0xea, 0, 0},
-	{0x5490, 0x1d, 0, 0}, {0x5580, 0x02, 0, 0}, {0x5583, 0x40, 0, 0},
-	{0x5584, 0x10, 0, 0}, {0x5589, 0x10, 0, 0}, {0x558a, 0x00, 0, 0},
-	{0x558b, 0xf8, 0, 0}, {0x5800, 0x23, 0, 0}, {0x5801, 0x14, 0, 0},
-	{0x5802, 0x0f, 0, 0}, {0x5803, 0x0f, 0, 0}, {0x5804, 0x12, 0, 0},
-	{0x5805, 0x26, 0, 0}, {0x5806, 0x0c, 0, 0}, {0x5807, 0x08, 0, 0},
-	{0x5808, 0x05, 0, 0}, {0x5809, 0x05, 0, 0}, {0x580a, 0x08, 0, 0},
-	{0x580b, 0x0d, 0, 0}, {0x580c, 0x08, 0, 0}, {0x580d, 0x03, 0, 0},
-	{0x580e, 0x00, 0, 0}, {0x580f, 0x00, 0, 0}, {0x5810, 0x03, 0, 0},
-	{0x5811, 0x09, 0, 0}, {0x5812, 0x07, 0, 0}, {0x5813, 0x03, 0, 0},
-	{0x5814, 0x00, 0, 0}, {0x5815, 0x01, 0, 0}, {0x5816, 0x03, 0, 0},
-	{0x5817, 0x08, 0, 0}, {0x5818, 0x0d, 0, 0}, {0x5819, 0x08, 0, 0},
-	{0x581a, 0x05, 0, 0}, {0x581b, 0x06, 0, 0}, {0x581c, 0x08, 0, 0},
-	{0x581d, 0x0e, 0, 0}, {0x581e, 0x29, 0, 0}, {0x581f, 0x17, 0, 0},
-	{0x5820, 0x11, 0, 0}, {0x5821, 0x11, 0, 0}, {0x5822, 0x15, 0, 0},
-	{0x5823, 0x28, 0, 0}, {0x5824, 0x46, 0, 0}, {0x5825, 0x26, 0, 0},
-	{0x5826, 0x08, 0, 0}, {0x5827, 0x26, 0, 0}, {0x5828, 0x64, 0, 0},
-	{0x5829, 0x26, 0, 0}, {0x582a, 0x24, 0, 0}, {0x582b, 0x22, 0, 0},
-	{0x582c, 0x24, 0, 0}, {0x582d, 0x24, 0, 0}, {0x582e, 0x06, 0, 0},
-	{0x582f, 0x22, 0, 0}, {0x5830, 0x40, 0, 0}, {0x5831, 0x42, 0, 0},
-	{0x5832, 0x24, 0, 0}, {0x5833, 0x26, 0, 0}, {0x5834, 0x24, 0, 0},
-	{0x5835, 0x22, 0, 0}, {0x5836, 0x22, 0, 0}, {0x5837, 0x26, 0, 0},
-	{0x5838, 0x44, 0, 0}, {0x5839, 0x24, 0, 0}, {0x583a, 0x26, 0, 0},
-	{0x583b, 0x28, 0, 0}, {0x583c, 0x42, 0, 0}, {0x583d, 0xce, 0, 0},
-	{0x5025, 0x00, 0, 0}, {0x3a0f, 0x30, 0, 0}, {0x3a10, 0x28, 0, 0},
-	{0x3a1b, 0x30, 0, 0}, {0x3a1e, 0x26, 0, 0}, {0x3a11, 0x60, 0, 0},
-	{0x3a1f, 0x14, 0, 0}, {0x3008, 0x02, 0, 0}, {0x3c00, 0x04, 0, 300},
+	{ 0x3103, 0x11, 0, 0 },	  { 0x3008, 0x82, 0, 5 },
+	{ 0x3008, 0x42, 0, 0 },	  { 0x3103, 0x03, 0, 0 },
+	{ 0x3630, 0x36, 0, 0 },	  { 0x3631, 0x0e, 0, 0 },
+	{ 0x3632, 0xe2, 0, 0 },	  { 0x3633, 0x12, 0, 0 },
+	{ 0x3621, 0xe0, 0, 0 },	  { 0x3704, 0xa0, 0, 0 },
+	{ 0x3703, 0x5a, 0, 0 },	  { 0x3715, 0x78, 0, 0 },
+	{ 0x3717, 0x01, 0, 0 },	  { 0x370b, 0x60, 0, 0 },
+	{ 0x3705, 0x1a, 0, 0 },	  { 0x3905, 0x02, 0, 0 },
+	{ 0x3906, 0x10, 0, 0 },	  { 0x3901, 0x0a, 0, 0 },
+	{ 0x3731, 0x12, 0, 0 },	  { 0x3600, 0x08, 0, 0 },
+	{ 0x3601, 0x33, 0, 0 },	  { 0x302d, 0x60, 0, 0 },
+	{ 0x3620, 0x52, 0, 0 },	  { 0x371b, 0x20, 0, 0 },
+	{ 0x471c, 0x50, 0, 0 },	  { 0x3a13, 0x43, 0, 0 },
+	{ 0x3a18, 0x00, 0, 0 },	  { 0x3a19, 0xf8, 0, 0 },
+	{ 0x3635, 0x13, 0, 0 },	  { 0x3636, 0x03, 0, 0 },
+	{ 0x3634, 0x40, 0, 0 },	  { 0x3622, 0x01, 0, 0 },
+	{ 0x3c01, 0xa4, 0, 0 },	  { 0x3c04, 0x28, 0, 0 },
+	{ 0x3c05, 0x98, 0, 0 },	  { 0x3c06, 0x00, 0, 0 },
+	{ 0x3c07, 0x08, 0, 0 },	  { 0x3c08, 0x00, 0, 0 },
+	{ 0x3c09, 0x1c, 0, 0 },	  { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 },	  { 0x3820, 0x41, 0, 0 },
+	{ 0x3821, 0x07, 0, 0 },	  { 0x3814, 0x31, 0, 0 },
+	{ 0x3815, 0x31, 0, 0 },	  { 0x3800, 0x00, 0, 0 },
+	{ 0x3801, 0x00, 0, 0 },	  { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 },	  { 0x3804, 0x0a, 0, 0 },
+	{ 0x3805, 0x3f, 0, 0 },	  { 0x3806, 0x07, 0, 0 },
+	{ 0x3807, 0x9b, 0, 0 },	  { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 },	  { 0x3812, 0x00, 0, 0 },
+	{ 0x3813, 0x06, 0, 0 },	  { 0x3618, 0x00, 0, 0 },
+	{ 0x3612, 0x29, 0, 0 },	  { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 },	  { 0x370c, 0x03, 0, 0 },
+	{ 0x3a02, 0x03, 0, 0 },	  { 0x3a03, 0xd8, 0, 0 },
+	{ 0x3a08, 0x01, 0, 0 },	  { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 },	  { 0x3a0b, 0xf6, 0, 0 },
+	{ 0x3a0e, 0x03, 0, 0 },	  { 0x3a0d, 0x04, 0, 0 },
+	{ 0x3a14, 0x03, 0, 0 },	  { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 },	  { 0x4004, 0x02, 0, 0 },
+	{ 0x3000, 0x00, 0, 0 },	  { 0x3002, 0x1c, 0, 0 },
+	{ 0x3004, 0xff, 0, 0 },	  { 0x3006, 0xc3, 0, 0 },
+	{ 0x302e, 0x08, 0, 0 },	  { 0x4300, 0x3f, 0, 0 },
+	{ 0x501f, 0x00, 0, 0 },	  { 0x4407, 0x04, 0, 0 },
+	{ 0x440e, 0x00, 0, 0 },	  { 0x460b, 0x35, 0, 0 },
+	{ 0x460c, 0x22, 0, 0 },	  { 0x4837, 0x0a, 0, 0 },
+	{ 0x3824, 0x02, 0, 0 },	  { 0x5000, 0xa7, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },	  { 0x5180, 0xff, 0, 0 },
+	{ 0x5181, 0xf2, 0, 0 },	  { 0x5182, 0x00, 0, 0 },
+	{ 0x5183, 0x14, 0, 0 },	  { 0x5184, 0x25, 0, 0 },
+	{ 0x5185, 0x24, 0, 0 },	  { 0x5186, 0x09, 0, 0 },
+	{ 0x5187, 0x09, 0, 0 },	  { 0x5188, 0x09, 0, 0 },
+	{ 0x5189, 0x88, 0, 0 },	  { 0x518a, 0x54, 0, 0 },
+	{ 0x518b, 0xee, 0, 0 },	  { 0x518c, 0xb2, 0, 0 },
+	{ 0x518d, 0x50, 0, 0 },	  { 0x518e, 0x34, 0, 0 },
+	{ 0x518f, 0x6b, 0, 0 },	  { 0x5190, 0x46, 0, 0 },
+	{ 0x5191, 0xf8, 0, 0 },	  { 0x5192, 0x04, 0, 0 },
+	{ 0x5193, 0x70, 0, 0 },	  { 0x5194, 0xf0, 0, 0 },
+	{ 0x5195, 0xf0, 0, 0 },	  { 0x5196, 0x03, 0, 0 },
+	{ 0x5197, 0x01, 0, 0 },	  { 0x5198, 0x04, 0, 0 },
+	{ 0x5199, 0x6c, 0, 0 },	  { 0x519a, 0x04, 0, 0 },
+	{ 0x519b, 0x00, 0, 0 },	  { 0x519c, 0x09, 0, 0 },
+	{ 0x519d, 0x2b, 0, 0 },	  { 0x519e, 0x38, 0, 0 },
+	{ 0x5381, 0x1e, 0, 0 },	  { 0x5382, 0x5b, 0, 0 },
+	{ 0x5383, 0x08, 0, 0 },	  { 0x5384, 0x0a, 0, 0 },
+	{ 0x5385, 0x7e, 0, 0 },	  { 0x5386, 0x88, 0, 0 },
+	{ 0x5387, 0x7c, 0, 0 },	  { 0x5388, 0x6c, 0, 0 },
+	{ 0x5389, 0x10, 0, 0 },	  { 0x538a, 0x01, 0, 0 },
+	{ 0x538b, 0x98, 0, 0 },	  { 0x5300, 0x08, 0, 0 },
+	{ 0x5301, 0x30, 0, 0 },	  { 0x5302, 0x10, 0, 0 },
+	{ 0x5303, 0x00, 0, 0 },	  { 0x5304, 0x08, 0, 0 },
+	{ 0x5305, 0x30, 0, 0 },	  { 0x5306, 0x08, 0, 0 },
+	{ 0x5307, 0x16, 0, 0 },	  { 0x5309, 0x08, 0, 0 },
+	{ 0x530a, 0x30, 0, 0 },	  { 0x530b, 0x04, 0, 0 },
+	{ 0x530c, 0x06, 0, 0 },	  { 0x5480, 0x01, 0, 0 },
+	{ 0x5481, 0x08, 0, 0 },	  { 0x5482, 0x14, 0, 0 },
+	{ 0x5483, 0x28, 0, 0 },	  { 0x5484, 0x51, 0, 0 },
+	{ 0x5485, 0x65, 0, 0 },	  { 0x5486, 0x71, 0, 0 },
+	{ 0x5487, 0x7d, 0, 0 },	  { 0x5488, 0x87, 0, 0 },
+	{ 0x5489, 0x91, 0, 0 },	  { 0x548a, 0x9a, 0, 0 },
+	{ 0x548b, 0xaa, 0, 0 },	  { 0x548c, 0xb8, 0, 0 },
+	{ 0x548d, 0xcd, 0, 0 },	  { 0x548e, 0xdd, 0, 0 },
+	{ 0x548f, 0xea, 0, 0 },	  { 0x5490, 0x1d, 0, 0 },
+	{ 0x5580, 0x02, 0, 0 },	  { 0x5583, 0x40, 0, 0 },
+	{ 0x5584, 0x10, 0, 0 },	  { 0x5589, 0x10, 0, 0 },
+	{ 0x558a, 0x00, 0, 0 },	  { 0x558b, 0xf8, 0, 0 },
+	{ 0x5800, 0x23, 0, 0 },	  { 0x5801, 0x14, 0, 0 },
+	{ 0x5802, 0x0f, 0, 0 },	  { 0x5803, 0x0f, 0, 0 },
+	{ 0x5804, 0x12, 0, 0 },	  { 0x5805, 0x26, 0, 0 },
+	{ 0x5806, 0x0c, 0, 0 },	  { 0x5807, 0x08, 0, 0 },
+	{ 0x5808, 0x05, 0, 0 },	  { 0x5809, 0x05, 0, 0 },
+	{ 0x580a, 0x08, 0, 0 },	  { 0x580b, 0x0d, 0, 0 },
+	{ 0x580c, 0x08, 0, 0 },	  { 0x580d, 0x03, 0, 0 },
+	{ 0x580e, 0x00, 0, 0 },	  { 0x580f, 0x00, 0, 0 },
+	{ 0x5810, 0x03, 0, 0 },	  { 0x5811, 0x09, 0, 0 },
+	{ 0x5812, 0x07, 0, 0 },	  { 0x5813, 0x03, 0, 0 },
+	{ 0x5814, 0x00, 0, 0 },	  { 0x5815, 0x01, 0, 0 },
+	{ 0x5816, 0x03, 0, 0 },	  { 0x5817, 0x08, 0, 0 },
+	{ 0x5818, 0x0d, 0, 0 },	  { 0x5819, 0x08, 0, 0 },
+	{ 0x581a, 0x05, 0, 0 },	  { 0x581b, 0x06, 0, 0 },
+	{ 0x581c, 0x08, 0, 0 },	  { 0x581d, 0x0e, 0, 0 },
+	{ 0x581e, 0x29, 0, 0 },	  { 0x581f, 0x17, 0, 0 },
+	{ 0x5820, 0x11, 0, 0 },	  { 0x5821, 0x11, 0, 0 },
+	{ 0x5822, 0x15, 0, 0 },	  { 0x5823, 0x28, 0, 0 },
+	{ 0x5824, 0x46, 0, 0 },	  { 0x5825, 0x26, 0, 0 },
+	{ 0x5826, 0x08, 0, 0 },	  { 0x5827, 0x26, 0, 0 },
+	{ 0x5828, 0x64, 0, 0 },	  { 0x5829, 0x26, 0, 0 },
+	{ 0x582a, 0x24, 0, 0 },	  { 0x582b, 0x22, 0, 0 },
+	{ 0x582c, 0x24, 0, 0 },	  { 0x582d, 0x24, 0, 0 },
+	{ 0x582e, 0x06, 0, 0 },	  { 0x582f, 0x22, 0, 0 },
+	{ 0x5830, 0x40, 0, 0 },	  { 0x5831, 0x42, 0, 0 },
+	{ 0x5832, 0x24, 0, 0 },	  { 0x5833, 0x26, 0, 0 },
+	{ 0x5834, 0x24, 0, 0 },	  { 0x5835, 0x22, 0, 0 },
+	{ 0x5836, 0x22, 0, 0 },	  { 0x5837, 0x26, 0, 0 },
+	{ 0x5838, 0x44, 0, 0 },	  { 0x5839, 0x24, 0, 0 },
+	{ 0x583a, 0x26, 0, 0 },	  { 0x583b, 0x28, 0, 0 },
+	{ 0x583c, 0x42, 0, 0 },	  { 0x583d, 0xce, 0, 0 },
+	{ 0x5025, 0x00, 0, 0 },	  { 0x3a0f, 0x30, 0, 0 },
+	{ 0x3a10, 0x28, 0, 0 },	  { 0x3a1b, 0x30, 0, 0 },
+	{ 0x3a1e, 0x26, 0, 0 },	  { 0x3a11, 0x60, 0, 0 },
+	{ 0x3a1f, 0x14, 0, 0 },	  { 0x3008, 0x02, 0, 0 },
+	{ 0x3c00, 0x04, 0, 300 },
 };
 
 static const struct reg_value ov5640_setting_VGA_640_480[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x06, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0xa3, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9b, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x06, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_XGA_1024_768[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x06, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0xa3, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9b, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x06, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_QVGA_320_240[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x06, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0xa3, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9b, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x06, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_QCIF_176_144[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x06, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0xa3, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9b, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x06, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_NTSC_720_480[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x3c, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0xa3, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9b, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x3c, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_PAL_720_576[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9b, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x38, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x06, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0xa3, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x04, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9b, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x38, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x06, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0xa3, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_720P_1280_720[] = {
-	{0x3c07, 0x07, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x31, 0, 0},
-	{0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0xfa, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x06, 0, 0}, {0x3807, 0xa9, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x04, 0, 0},
-	{0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x02, 0, 0},
-	{0x3a03, 0xe4, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0xbc, 0, 0},
-	{0x3a0a, 0x01, 0, 0}, {0x3a0b, 0x72, 0, 0}, {0x3a0e, 0x01, 0, 0},
-	{0x3a0d, 0x02, 0, 0}, {0x3a14, 0x02, 0, 0}, {0x3a15, 0xe4, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x02, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x37, 0, 0}, {0x460c, 0x20, 0, 0},
-	{0x3824, 0x04, 0, 0}, {0x5001, 0x83, 0, 0},
+	{ 0x3c07, 0x07, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x31, 0, 0 }, { 0x3815, 0x31, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0xfa, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x06, 0, 0 }, { 0x3807, 0xa9, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x04, 0, 0 },
+	{ 0x3618, 0x00, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x64, 0, 0 },
+	{ 0x3709, 0x52, 0, 0 }, { 0x370c, 0x03, 0, 0 }, { 0x3a02, 0x02, 0, 0 },
+	{ 0x3a03, 0xe4, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0xbc, 0, 0 },
+	{ 0x3a0a, 0x01, 0, 0 }, { 0x3a0b, 0x72, 0, 0 }, { 0x3a0e, 0x01, 0, 0 },
+	{ 0x3a0d, 0x02, 0, 0 }, { 0x3a14, 0x02, 0, 0 }, { 0x3a15, 0xe4, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x02, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x37, 0, 0 }, { 0x460c, 0x20, 0, 0 }, { 0x3824, 0x04, 0, 0 },
+	{ 0x5001, 0x83, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_1080P_1920_1080[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x11, 0, 0},
-	{0x3815, 0x11, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x00, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9f, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x04, 0, 0},
-	{0x3618, 0x04, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x21, 0, 0},
-	{0x3709, 0x12, 0, 0}, {0x370c, 0x00, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x06, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0x83, 0, 0},
-	{0x3c07, 0x07, 0, 0}, {0x3c08, 0x00, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3800, 0x01, 0, 0}, {0x3801, 0x50, 0, 0}, {0x3802, 0x01, 0, 0},
-	{0x3803, 0xb2, 0, 0}, {0x3804, 0x08, 0, 0}, {0x3805, 0xef, 0, 0},
-	{0x3806, 0x05, 0, 0}, {0x3807, 0xf1, 0, 0},
-	{0x3612, 0x2b, 0, 0}, {0x3708, 0x64, 0, 0},
-	{0x3a02, 0x04, 0, 0}, {0x3a03, 0x60, 0, 0}, {0x3a08, 0x01, 0, 0},
-	{0x3a09, 0x50, 0, 0}, {0x3a0a, 0x01, 0, 0}, {0x3a0b, 0x18, 0, 0},
-	{0x3a0e, 0x03, 0, 0}, {0x3a0d, 0x04, 0, 0}, {0x3a14, 0x04, 0, 0},
-	{0x3a15, 0x60, 0, 0}, {0x4407, 0x04, 0, 0},
-	{0x460b, 0x37, 0, 0}, {0x460c, 0x20, 0, 0}, {0x3824, 0x04, 0, 0},
-	{0x4005, 0x1a, 0, 0},
+	{ 0x3c07, 0x08, 0, 0 }, { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 }, { 0x3814, 0x11, 0, 0 }, { 0x3815, 0x11, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 }, { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x00, 0, 0 }, { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 }, { 0x3807, 0x9f, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 }, { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x04, 0, 0 },
+	{ 0x3618, 0x04, 0, 0 }, { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x21, 0, 0 },
+	{ 0x3709, 0x12, 0, 0 }, { 0x370c, 0x00, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 }, { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 }, { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 }, { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 }, { 0x4004, 0x06, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 }, { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0x83, 0, 0 }, { 0x3c07, 0x07, 0, 0 }, { 0x3c08, 0x00, 0, 0 },
+	{ 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 }, { 0x3c0b, 0x40, 0, 0 },
+	{ 0x3800, 0x01, 0, 0 }, { 0x3801, 0x50, 0, 0 }, { 0x3802, 0x01, 0, 0 },
+	{ 0x3803, 0xb2, 0, 0 }, { 0x3804, 0x08, 0, 0 }, { 0x3805, 0xef, 0, 0 },
+	{ 0x3806, 0x05, 0, 0 }, { 0x3807, 0xf1, 0, 0 }, { 0x3612, 0x2b, 0, 0 },
+	{ 0x3708, 0x64, 0, 0 }, { 0x3a02, 0x04, 0, 0 }, { 0x3a03, 0x60, 0, 0 },
+	{ 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x50, 0, 0 }, { 0x3a0a, 0x01, 0, 0 },
+	{ 0x3a0b, 0x18, 0, 0 }, { 0x3a0e, 0x03, 0, 0 }, { 0x3a0d, 0x04, 0, 0 },
+	{ 0x3a14, 0x04, 0, 0 }, { 0x3a15, 0x60, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x37, 0, 0 }, { 0x460c, 0x20, 0, 0 }, { 0x3824, 0x04, 0, 0 },
+	{ 0x4005, 0x1a, 0, 0 },
 };
 
 static const struct reg_value ov5640_setting_QSXGA_2592_1944[] = {
-	{0x3c07, 0x08, 0, 0},
-	{0x3c09, 0x1c, 0, 0}, {0x3c0a, 0x9c, 0, 0}, {0x3c0b, 0x40, 0, 0},
-	{0x3814, 0x11, 0, 0},
-	{0x3815, 0x11, 0, 0}, {0x3800, 0x00, 0, 0}, {0x3801, 0x00, 0, 0},
-	{0x3802, 0x00, 0, 0}, {0x3803, 0x00, 0, 0}, {0x3804, 0x0a, 0, 0},
-	{0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0}, {0x3807, 0x9f, 0, 0},
-	{0x3810, 0x00, 0, 0},
-	{0x3811, 0x10, 0, 0}, {0x3812, 0x00, 0, 0}, {0x3813, 0x04, 0, 0},
-	{0x3618, 0x04, 0, 0}, {0x3612, 0x29, 0, 0}, {0x3708, 0x21, 0, 0},
-	{0x3709, 0x12, 0, 0}, {0x370c, 0x00, 0, 0}, {0x3a02, 0x03, 0, 0},
-	{0x3a03, 0xd8, 0, 0}, {0x3a08, 0x01, 0, 0}, {0x3a09, 0x27, 0, 0},
-	{0x3a0a, 0x00, 0, 0}, {0x3a0b, 0xf6, 0, 0}, {0x3a0e, 0x03, 0, 0},
-	{0x3a0d, 0x04, 0, 0}, {0x3a14, 0x03, 0, 0}, {0x3a15, 0xd8, 0, 0},
-	{0x4001, 0x02, 0, 0}, {0x4004, 0x06, 0, 0},
-	{0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0}, {0x460c, 0x22, 0, 0},
-	{0x3824, 0x02, 0, 0}, {0x5001, 0x83, 0, 70},
+	{ 0x3c07, 0x08, 0, 0 },	 { 0x3c09, 0x1c, 0, 0 }, { 0x3c0a, 0x9c, 0, 0 },
+	{ 0x3c0b, 0x40, 0, 0 },	 { 0x3814, 0x11, 0, 0 }, { 0x3815, 0x11, 0, 0 },
+	{ 0x3800, 0x00, 0, 0 },	 { 0x3801, 0x00, 0, 0 }, { 0x3802, 0x00, 0, 0 },
+	{ 0x3803, 0x00, 0, 0 },	 { 0x3804, 0x0a, 0, 0 }, { 0x3805, 0x3f, 0, 0 },
+	{ 0x3806, 0x07, 0, 0 },	 { 0x3807, 0x9f, 0, 0 }, { 0x3810, 0x00, 0, 0 },
+	{ 0x3811, 0x10, 0, 0 },	 { 0x3812, 0x00, 0, 0 }, { 0x3813, 0x04, 0, 0 },
+	{ 0x3618, 0x04, 0, 0 },	 { 0x3612, 0x29, 0, 0 }, { 0x3708, 0x21, 0, 0 },
+	{ 0x3709, 0x12, 0, 0 },	 { 0x370c, 0x00, 0, 0 }, { 0x3a02, 0x03, 0, 0 },
+	{ 0x3a03, 0xd8, 0, 0 },	 { 0x3a08, 0x01, 0, 0 }, { 0x3a09, 0x27, 0, 0 },
+	{ 0x3a0a, 0x00, 0, 0 },	 { 0x3a0b, 0xf6, 0, 0 }, { 0x3a0e, 0x03, 0, 0 },
+	{ 0x3a0d, 0x04, 0, 0 },	 { 0x3a14, 0x03, 0, 0 }, { 0x3a15, 0xd8, 0, 0 },
+	{ 0x4001, 0x02, 0, 0 },	 { 0x4004, 0x06, 0, 0 }, { 0x4407, 0x04, 0, 0 },
+	{ 0x460b, 0x35, 0, 0 },	 { 0x460c, 0x22, 0, 0 }, { 0x3824, 0x02, 0, 0 },
+	{ 0x5001, 0x83, 0, 70 },
 };
 
 /* power-on sensor init reg table */
 static const struct ov5640_mode_info ov5640_mode_init_data = {
-	0, SUBSAMPLING, 640, 1896, 480, 984,
+	0,
+	SUBSAMPLING,
+	640,
+	1896,
+	480,
+	984,
 	ov5640_init_setting_30fps_VGA,
 	ARRAY_SIZE(ov5640_init_setting_30fps_VGA),
 };
 
-static const struct ov5640_mode_info
-ov5640_mode_data[OV5640_NUM_MODES] = {
-	{OV5640_MODE_QCIF_176_144, SUBSAMPLING,
-	 176, 2844, 144, 984,
-	 ov5640_setting_QCIF_176_144,
-	 ARRAY_SIZE(ov5640_setting_QCIF_176_144)},
-	{OV5640_MODE_QVGA_320_240, SUBSAMPLING,
-	 320, 2844, 240, 984,
-	 ov5640_setting_QVGA_320_240,
-	 ARRAY_SIZE(ov5640_setting_QVGA_320_240)},
-	{OV5640_MODE_VGA_640_480, SUBSAMPLING,
-	 640, 2844, 480, 1080,
-	 ov5640_setting_VGA_640_480,
-	 ARRAY_SIZE(ov5640_setting_VGA_640_480)},
-	{OV5640_MODE_NTSC_720_480, SUBSAMPLING,
-	 720, 2844, 480, 984,
-	 ov5640_setting_NTSC_720_480,
-	 ARRAY_SIZE(ov5640_setting_NTSC_720_480)},
-	{OV5640_MODE_PAL_720_576, SUBSAMPLING,
-	 720, 2844, 576, 984,
-	 ov5640_setting_PAL_720_576,
-	 ARRAY_SIZE(ov5640_setting_PAL_720_576)},
-	{OV5640_MODE_XGA_1024_768, SUBSAMPLING,
-	 1024, 2844, 768, 1080,
-	 ov5640_setting_XGA_1024_768,
-	 ARRAY_SIZE(ov5640_setting_XGA_1024_768)},
-	{OV5640_MODE_720P_1280_720, SUBSAMPLING,
-	 1280, 2844, 720, 740,
-	 ov5640_setting_720P_1280_720,
-	 ARRAY_SIZE(ov5640_setting_720P_1280_720)},
-	{OV5640_MODE_1080P_1920_1080, SCALING,
-	 1920, 2844, 1080, 1120,
-	 ov5640_setting_1080P_1920_1080,
-	 ARRAY_SIZE(ov5640_setting_1080P_1920_1080)},
-	{OV5640_MODE_QSXGA_2592_1944, SCALING,
-	 2592, 2844, 1944, 1968,
-	 ov5640_setting_QSXGA_2592_1944,
-	 ARRAY_SIZE(ov5640_setting_QSXGA_2592_1944)},
+static const struct ov5640_mode_info ov5640_mode_data[OV5640_NUM_MODES] = {
+	{ OV5640_MODE_QCIF_176_144, SUBSAMPLING, 176, 2844, 144, 984,
+	  ov5640_setting_QCIF_176_144,
+	  ARRAY_SIZE(ov5640_setting_QCIF_176_144) },
+	{ OV5640_MODE_QVGA_320_240, SUBSAMPLING, 320, 2844, 240, 984,
+	  ov5640_setting_QVGA_320_240,
+	  ARRAY_SIZE(ov5640_setting_QVGA_320_240) },
+	{ OV5640_MODE_VGA_640_480, SUBSAMPLING, 640, 2844, 480, 1080,
+	  ov5640_setting_VGA_640_480, ARRAY_SIZE(ov5640_setting_VGA_640_480) },
+	{ OV5640_MODE_NTSC_720_480, SUBSAMPLING, 720, 2844, 480, 984,
+	  ov5640_setting_NTSC_720_480,
+	  ARRAY_SIZE(ov5640_setting_NTSC_720_480) },
+	{ OV5640_MODE_PAL_720_576, SUBSAMPLING, 720, 2844, 576, 984,
+	  ov5640_setting_PAL_720_576, ARRAY_SIZE(ov5640_setting_PAL_720_576) },
+	{ OV5640_MODE_XGA_1024_768, SUBSAMPLING, 1024, 2844, 768, 1080,
+	  ov5640_setting_XGA_1024_768,
+	  ARRAY_SIZE(ov5640_setting_XGA_1024_768) },
+	{ OV5640_MODE_720P_1280_720, SUBSAMPLING, 1280, 2844, 720, 740,
+	  ov5640_setting_720P_1280_720,
+	  ARRAY_SIZE(ov5640_setting_720P_1280_720) },
+	{ OV5640_MODE_1080P_1920_1080, SCALING, 1920, 2844, 1080, 1120,
+	  ov5640_setting_1080P_1920_1080,
+	  ARRAY_SIZE(ov5640_setting_1080P_1920_1080) },
+	{ OV5640_MODE_QSXGA_2592_1944, SCALING, 2592, 2844, 1944, 1968,
+	  ov5640_setting_QSXGA_2592_1944,
+	  ARRAY_SIZE(ov5640_setting_QSXGA_2592_1944) },
 };
 
 static int ov5640_init_slave_id(struct ov5640_dev *sensor)
@@ -631,10 +669,10 @@ static int ov5640_write_reg(struct ov5640_dev *sensor, u16 reg, u8 val)
 	msg.buf = buf;
 	msg.len = sizeof(buf);
 
-	ret = i2c_transfer(client->adapter, &msg, 1);
+	ret = 0; //i2c_transfer(client->adapter, &msg, 1);
 	if (ret < 0) {
-		dev_err(&client->dev, "%s: error: reg=%x, val=%x\n",
-			__func__, reg, val);
+		dev_err(&client->dev, "%s: error: reg=%x, val=%x\n", __func__,
+			reg, val);
 		return ret;
 	}
 
@@ -661,13 +699,12 @@ static int ov5640_read_reg(struct ov5640_dev *sensor, u16 reg, u8 *val)
 	msg[1].buf = buf;
 	msg[1].len = 1;
 
-	ret = i2c_transfer(client->adapter, msg, 2);
+	ret = 0; //i2c_transfer(client->adapter, msg, 2);
 	if (ret < 0) {
-		dev_err(&client->dev, "%s: error: reg=%x\n",
-			__func__, reg);
+		dev_err(&client->dev, "%s: error: reg=%x\n", __func__, reg);
 		return ret;
 	}
-
+	printk("fredy: read ov5640 testing \n");
 	*val = buf[0];
 	return 0;
 }
@@ -699,8 +736,7 @@ static int ov5640_write_reg16(struct ov5640_dev *sensor, u16 reg, u16 val)
 	return ov5640_write_reg(sensor, reg + 1, val & 0xff);
 }
 
-static int ov5640_mod_reg(struct ov5640_dev *sensor, u16 reg,
-			  u8 mask, u8 val)
+static int ov5640_mod_reg(struct ov5640_dev *sensor, u16 reg, u8 mask, u8 val)
 {
 	u8 readval;
 	int ret;
@@ -779,43 +815,43 @@ static int ov5640_mod_reg(struct ov5640_dev *sensor, u16 reg,
  * This is supposed to be ranging from 1 to 8, but the value is always
  * set to 3 in the vendor kernels.
  */
-#define OV5640_PLL_PREDIV	3
+#define OV5640_PLL_PREDIV 3
 
-#define OV5640_PLL_MULT_MIN	4
-#define OV5640_PLL_MULT_MAX	252
+#define OV5640_PLL_MULT_MIN 4
+#define OV5640_PLL_MULT_MAX 252
 
 /*
  * This is supposed to be ranging from 1 to 16, but the value is
  * always set to either 1 or 2 in the vendor kernels.
  */
-#define OV5640_SYSDIV_MIN	1
-#define OV5640_SYSDIV_MAX	16
+#define OV5640_SYSDIV_MIN 1
+#define OV5640_SYSDIV_MAX 16
 
 /*
  * Hardcode these values for scaler and non-scaler modes.
  * FIXME: to be re-calcualted for 1 data lanes setups
  */
-#define OV5640_MIPI_DIV_PCLK	2
-#define OV5640_MIPI_DIV_SCLK	1
+#define OV5640_MIPI_DIV_PCLK 2
+#define OV5640_MIPI_DIV_SCLK 1
 
 /*
  * This is supposed to be ranging from 1 to 2, but the value is always
  * set to 2 in the vendor kernels.
  */
-#define OV5640_PLL_ROOT_DIV			2
-#define OV5640_PLL_CTRL3_PLL_ROOT_DIV_2		BIT(4)
+#define OV5640_PLL_ROOT_DIV 2
+#define OV5640_PLL_CTRL3_PLL_ROOT_DIV_2 BIT(4)
 
 /*
  * We only supports 8-bit formats at the moment
  */
-#define OV5640_BIT_DIV				2
-#define OV5640_PLL_CTRL0_MIPI_MODE_8BIT		0x08
+#define OV5640_BIT_DIV 2
+#define OV5640_PLL_CTRL0_MIPI_MODE_8BIT 0x08
 
 /*
  * This is supposed to be ranging from 1 to 8, but the value is always
  * set to 2 in the vendor kernels.
  */
-#define OV5640_SCLK_ROOT_DIV	2
+#define OV5640_SCLK_ROOT_DIV 2
 
 /*
  * This is hardcoded so that the consistency is maintained between SCLK and
@@ -827,8 +863,8 @@ static int ov5640_mod_reg(struct ov5640_dev *sensor, u16 reg,
  * This is supposed to be ranging from 1 to 8, but the value is always
  * set to 1 in the vendor kernels.
  */
-#define OV5640_PCLK_ROOT_DIV			1
-#define OV5640_PLL_SYS_ROOT_DIVIDER_BYPASS	0x00
+#define OV5640_PCLK_ROOT_DIV 1
+#define OV5640_PLL_SYS_ROOT_DIVIDER_BYPASS 0x00
 
 static unsigned long ov5640_compute_sys_clk(struct ov5640_dev *sensor,
 					    u8 pll_prediv, u8 pll_mult,
@@ -844,20 +880,17 @@ static unsigned long ov5640_compute_sys_clk(struct ov5640_dev *sensor,
 }
 
 static unsigned long ov5640_calc_sys_clk(struct ov5640_dev *sensor,
-					 unsigned long rate,
-					 u8 *pll_prediv, u8 *pll_mult,
-					 u8 *sysdiv)
+					 unsigned long rate, u8 *pll_prediv,
+					 u8 *pll_mult, u8 *sysdiv)
 {
 	unsigned long best = ~0;
 	u8 best_sysdiv = 1, best_mult = 1;
 	u8 _sysdiv, _pll_mult;
 
-	for (_sysdiv = OV5640_SYSDIV_MIN;
-	     _sysdiv <= OV5640_SYSDIV_MAX;
+	for (_sysdiv = OV5640_SYSDIV_MIN; _sysdiv <= OV5640_SYSDIV_MAX;
 	     _sysdiv++) {
 		for (_pll_mult = OV5640_PLL_MULT_MIN;
-		     _pll_mult <= OV5640_PLL_MULT_MAX;
-		     _pll_mult++) {
+		     _pll_mult <= OV5640_PLL_MULT_MAX; _pll_mult++) {
 			unsigned long _rate;
 
 			/*
@@ -867,9 +900,8 @@ static unsigned long ov5640_calc_sys_clk(struct ov5640_dev *sensor,
 			if (_pll_mult > 127 && (_pll_mult % 2))
 				continue;
 
-			_rate = ov5640_compute_sys_clk(sensor,
-						       OV5640_PLL_PREDIV,
-						       _pll_mult, _sysdiv);
+			_rate = ov5640_compute_sys_clk(
+				sensor, OV5640_PLL_PREDIV, _pll_mult, _sysdiv);
 
 			/*
 			 * We have reached the maximum allowed PLL1 output,
@@ -945,8 +977,7 @@ static unsigned long ov5640_calc_sys_clk(struct ov5640_dev *sensor,
  * FIXME: this deviates from the sensor manual documentation which is quite
  * thin on the MIPI clock tree generation part.
  */
-static int ov5640_set_mipi_pclk(struct ov5640_dev *sensor,
-				unsigned long rate)
+static int ov5640_set_mipi_pclk(struct ov5640_dev *sensor, unsigned long rate)
 {
 	const struct ov5640_mode_info *mode = sensor->current_mode;
 	u8 prediv, mult, sysdiv;
@@ -958,19 +989,18 @@ static int ov5640_set_mipi_pclk(struct ov5640_dev *sensor,
 	 * but according to the sensor manual it goes through the
 	 * scaler before subsampling.
 	 */
-	if (mode->dn_mode == SCALING ||
-	   (mode->id == OV5640_MODE_720P_1280_720))
+	if (mode->dn_mode == SCALING || (mode->id == OV5640_MODE_720P_1280_720))
 		mipi_div = OV5640_MIPI_DIV_SCLK;
 	else
 		mipi_div = OV5640_MIPI_DIV_PCLK;
 
 	ov5640_calc_sys_clk(sensor, rate, &prediv, &mult, &sysdiv);
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL0,
-			     0x0f, OV5640_PLL_CTRL0_MIPI_MODE_8BIT);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL0, 0x0f,
+			     OV5640_PLL_CTRL0_MIPI_MODE_8BIT);
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL1,
-			     0xff, sysdiv << 4 | mipi_div);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL1, 0xff,
+			     sysdiv << 4 | mipi_div);
 	if (ret)
 		return ret;
 
@@ -978,22 +1008,22 @@ static int ov5640_set_mipi_pclk(struct ov5640_dev *sensor,
 	if (ret)
 		return ret;
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL3,
-			     0x1f, OV5640_PLL_CTRL3_PLL_ROOT_DIV_2 | prediv);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL3, 0x1f,
+			     OV5640_PLL_CTRL3_PLL_ROOT_DIV_2 | prediv);
 	if (ret)
 		return ret;
 
-	return ov5640_mod_reg(sensor, OV5640_REG_SYS_ROOT_DIVIDER,
-			      0x30, OV5640_PLL_SYS_ROOT_DIVIDER_BYPASS);
+	return ov5640_mod_reg(sensor, OV5640_REG_SYS_ROOT_DIVIDER, 0x30,
+			      OV5640_PLL_SYS_ROOT_DIVIDER_BYPASS);
 }
 
 static unsigned long ov5640_calc_pclk(struct ov5640_dev *sensor,
-				      unsigned long rate,
-				      u8 *pll_prediv, u8 *pll_mult, u8 *sysdiv,
-				      u8 *pll_rdiv, u8 *bit_div, u8 *pclk_div)
+				      unsigned long rate, u8 *pll_prediv,
+				      u8 *pll_mult, u8 *sysdiv, u8 *pll_rdiv,
+				      u8 *bit_div, u8 *pclk_div)
 {
 	unsigned long _rate = rate * OV5640_PLL_ROOT_DIV * OV5640_BIT_DIV *
-				OV5640_PCLK_ROOT_DIV;
+			      OV5640_PCLK_ROOT_DIV;
 
 	_rate = ov5640_calc_sys_clk(sensor, _rate, pll_prediv, pll_mult,
 				    sysdiv);
@@ -1015,8 +1045,7 @@ static int ov5640_set_dvp_pclk(struct ov5640_dev *sensor, unsigned long rate)
 	if (bit_div == 2)
 		bit_div = 8;
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL0,
-			     0x0f, bit_div);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL0, 0x0f, bit_div);
 	if (ret)
 		return ret;
 
@@ -1024,18 +1053,17 @@ static int ov5640_set_dvp_pclk(struct ov5640_dev *sensor, unsigned long rate)
 	 * We need to set sysdiv according to the clock, and to clear
 	 * the MIPI divider.
 	 */
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL1,
-			     0xff, sysdiv << 4);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL1, 0xff,
+			     sysdiv << 4);
 	if (ret)
 		return ret;
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL2,
-			     0xff, mult);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL2, 0xff, mult);
 	if (ret)
 		return ret;
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL3,
-			     0x1f, prediv | ((pll_rdiv - 1) << 4));
+	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL3, 0x1f,
+			     prediv | ((pll_rdiv - 1) << 4));
 	if (ret)
 		return ret;
 
@@ -1132,8 +1160,8 @@ static int ov5640_load_regs(struct ov5640_dev *sensor,
 
 static int ov5640_set_autoexposure(struct ov5640_dev *sensor, bool on)
 {
-	return ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL,
-			      BIT(0), on ? 0 : BIT(0));
+	return ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL, BIT(0),
+			      on ? 0 : BIT(0));
 }
 
 /* read exposure, in number of line periods */
@@ -1165,18 +1193,15 @@ static int ov5640_set_exposure(struct ov5640_dev *sensor, u32 exposure)
 
 	exposure <<= 4;
 
-	ret = ov5640_write_reg(sensor,
-			       OV5640_REG_AEC_PK_EXPOSURE_LO,
+	ret = ov5640_write_reg(sensor, OV5640_REG_AEC_PK_EXPOSURE_LO,
 			       exposure & 0xff);
 	if (ret)
 		return ret;
-	ret = ov5640_write_reg(sensor,
-			       OV5640_REG_AEC_PK_EXPOSURE_MED,
+	ret = ov5640_write_reg(sensor, OV5640_REG_AEC_PK_EXPOSURE_MED,
 			       (exposure >> 8) & 0xff);
 	if (ret)
 		return ret;
-	return ov5640_write_reg(sensor,
-				OV5640_REG_AEC_PK_EXPOSURE_HI,
+	return ov5640_write_reg(sensor, OV5640_REG_AEC_PK_EXPOSURE_HI,
 				(exposure >> 16) & 0x0f);
 }
 
@@ -1200,8 +1225,8 @@ static int ov5640_set_gain(struct ov5640_dev *sensor, int gain)
 
 static int ov5640_set_autogain(struct ov5640_dev *sensor, bool on)
 {
-	return ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL,
-			      BIT(1), on ? 0 : BIT(1));
+	return ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL, BIT(1),
+			      on ? 0 : BIT(1));
 }
 
 static int ov5640_set_stream_dvp(struct ov5640_dev *sensor, bool on)
@@ -1248,11 +1273,9 @@ static int ov5640_set_stream_dvp(struct ov5640_dev *sensor, bool on)
 		if (flags & V4L2_MBUS_VSYNC_ACTIVE_LOW)
 			vsync_pol = 1;
 
-		ret = ov5640_write_reg(sensor,
-				       OV5640_REG_POLARITY_CTRL00,
-				       (pclk_pol << 5) |
-				       (hsync_pol << 1) |
-				       vsync_pol);
+		ret = ov5640_write_reg(sensor, OV5640_REG_POLARITY_CTRL00,
+				       (pclk_pol << 5) | (hsync_pol << 1) |
+					       vsync_pol);
 
 		if (ret)
 			return ret;
@@ -1266,20 +1289,20 @@ static int ov5640_set_stream_dvp(struct ov5640_dev *sensor, bool on)
 	 * 3:	 PWDN PHY RX
 	 * 2:	 MIPI enable
 	 */
-	ret = ov5640_write_reg(sensor,
-			       OV5640_REG_IO_MIPI_CTRL00, on ? 0x18 : 0);
+	ret = ov5640_write_reg(sensor, OV5640_REG_IO_MIPI_CTRL00,
+			       on ? 0x18 : 0);
 	if (ret)
 		return ret;
 
-	return ov5640_write_reg(sensor, OV5640_REG_SYS_CTRL0, on ?
-				OV5640_REG_SYS_CTRL0_SW_PWUP :
-				OV5640_REG_SYS_CTRL0_SW_PWDN);
+	return ov5640_write_reg(sensor, OV5640_REG_SYS_CTRL0,
+				on ? OV5640_REG_SYS_CTRL0_SW_PWUP :
+					   OV5640_REG_SYS_CTRL0_SW_PWDN);
 }
 
 static int ov5640_set_stream_mipi(struct ov5640_dev *sensor, bool on)
 {
 	int ret;
-
+	printk("fredy : ov5640_set_stream_mipi \n ");
 	/*
 	 * Enable/disable the MIPI interface
 	 *
@@ -1297,21 +1320,21 @@ static int ov5640_set_stream_mipi(struct ov5640_dev *sensor, bool on)
 	 * [2] = 1/0	: MIPI interface enable/disable
 	 * [1:0] = 01/00: FIXME: 'debug'
 	 */
-	ret = ov5640_write_reg(sensor, OV5640_REG_IO_MIPI_CTRL00,
-			       on ? 0x45 : 0x40);
+	ret = 0; //ov5640_write_reg(sensor, OV5640_REG_IO_MIPI_CTRL00,
+		//     on ? 0x45 : 0x40);
 	if (ret)
 		return ret;
 
-	return ov5640_write_reg(sensor, OV5640_REG_FRAME_CTRL01,
-				on ? 0x00 : 0x0f);
+	return 0; //ov5640_write_reg(sensor, OV5640_REG_FRAME_CTRL01,
+		//on ? 0x00 : 0x0f);
 }
 
 static int ov5640_get_sysclk(struct ov5640_dev *sensor)
 {
-	 /* calculate sysclk */
+	/* calculate sysclk */
 	u32 xvclk = sensor->xclk_freq / 10000;
 	u32 multiplier, prediv, VCO, sysdiv, pll_rdiv;
-	u32 sclk_rdiv_map[] = {1, 2, 4, 8};
+	u32 sclk_rdiv_map[] = { 1, 2, 4, 8 };
 	u32 bit_div2x = 1, sclk_rdiv, sysclk;
 	u8 temp1, temp2;
 	int ret;
@@ -1359,7 +1382,7 @@ static int ov5640_get_sysclk(struct ov5640_dev *sensor)
 
 static int ov5640_set_night_mode(struct ov5640_dev *sensor)
 {
-	 /* read HTS from register settings */
+	/* read HTS from register settings */
 	u8 mode;
 	int ret;
 
@@ -1410,8 +1433,7 @@ static int ov5640_get_light_freq(struct ov5640_dev *sensor)
 
 	if (temp & 0x80) {
 		/* manual */
-		ret = ov5640_read_reg(sensor, OV5640_REG_HZ5060_CTRL00,
-				      &temp1);
+		ret = ov5640_read_reg(sensor, OV5640_REG_HZ5060_CTRL00, &temp1);
 		if (ret)
 			return ret;
 		if (temp1 & 0x04) {
@@ -1495,8 +1517,8 @@ static int ov5640_set_ae_target(struct ov5640_dev *sensor, int target)
 	u32 fast_high, fast_low;
 	int ret;
 
-	sensor->ae_low = target * 23 / 25;	/* 0.92 */
-	sensor->ae_high = target * 27 / 25;	/* 1.08 */
+	sensor->ae_low = target * 23 / 25; /* 0.92 */
+	sensor->ae_high = target * 27 / 25; /* 1.08 */
 
 	fast_high = sensor->ae_high << 1;
 	if (fast_high > 255)
@@ -1542,8 +1564,8 @@ static int ov5640_set_binning(struct ov5640_dev *sensor, bool enable)
 	 * TIMING TC REG21:
 	 * - [0]:	Horizontal binning enable
 	 */
-	ret = ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG21,
-			     BIT(0), enable ? BIT(0) : 0);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG21, BIT(0),
+			     enable ? BIT(0) : 0);
 	if (ret)
 		return ret;
 	/*
@@ -1551,8 +1573,8 @@ static int ov5640_set_binning(struct ov5640_dev *sensor, bool enable)
 	 * - [0]:	Undocumented, but hardcoded init sequences
 	 *		are always setting REG21/REG20 bit 0 to same value...
 	 */
-	return ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG20,
-			      BIT(0), enable ? BIT(0) : 0);
+	return ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG20, BIT(0),
+			      enable ? BIT(0) : 0);
 }
 
 static int ov5640_set_virtual_channel(struct ov5640_dev *sensor)
@@ -1583,8 +1605,7 @@ ov5640_find_mode(struct ov5640_dev *sensor, enum ov5640_frame_rate fr,
 	const struct ov5640_mode_info *mode;
 
 	mode = v4l2_find_nearest_size(ov5640_mode_data,
-				      ARRAY_SIZE(ov5640_mode_data),
-				      hact, vact,
+				      ARRAY_SIZE(ov5640_mode_data), hact, vact,
 				      width, height);
 
 	if (!mode ||
@@ -1592,13 +1613,11 @@ ov5640_find_mode(struct ov5640_dev *sensor, enum ov5640_frame_rate fr,
 		return NULL;
 
 	/* Only 640x480 can operate at 60fps (for now) */
-	if (fr == OV5640_60_FPS &&
-	    !(mode->hact == 640 && mode->vact == 480))
+	if (fr == OV5640_60_FPS && !(mode->hact == 640 && mode->vact == 480))
 		return NULL;
 
 	/* 2592x1944 only works at 15fps max */
-	if ((mode->hact == 2592 && mode->vact == 1944) &&
-	    fr > OV5640_15_FPS)
+	if ((mode->hact == 2592 && mode->vact == 1944) && fr > OV5640_15_FPS)
 		return NULL;
 
 	return mode;
@@ -1715,16 +1734,13 @@ static int ov5640_set_mode_exposure_calc(struct ov5640_dev *sensor,
 	/* calculate capture shutter/gain16 */
 	if (average > sensor->ae_low && average < sensor->ae_high) {
 		/* in stable range */
-		cap_gain16_shutter =
-			prev_gain16 * prev_shutter *
-			cap_sysclk / sensor->prev_sysclk *
-			sensor->prev_hts / cap_hts *
-			sensor->ae_target / average;
+		cap_gain16_shutter = prev_gain16 * prev_shutter * cap_sysclk /
+				     sensor->prev_sysclk * sensor->prev_hts /
+				     cap_hts * sensor->ae_target / average;
 	} else {
-		cap_gain16_shutter =
-			prev_gain16 * prev_shutter *
-			cap_sysclk / sensor->prev_sysclk *
-			sensor->prev_hts / cap_hts;
+		cap_gain16_shutter = prev_gain16 * prev_shutter * cap_sysclk /
+				     sensor->prev_sysclk * sensor->prev_hts /
+				     cap_hts;
 	}
 
 	/* gain to shutter */
@@ -1747,9 +1763,9 @@ static int ov5640_set_mode_exposure_calc(struct ov5640_dev *sensor,
 			cap_gain16 = cap_gain16_shutter / cap_shutter;
 		} else {
 			/* 1/100 < (cap_shutter = n/100) =< max */
-			cap_shutter =
-				((int)(cap_gain16_shutter / 16 / cap_bandfilt))
-				* cap_bandfilt;
+			cap_shutter = ((int)(cap_gain16_shutter / 16 /
+					     cap_bandfilt)) *
+				      cap_bandfilt;
 			if (!cap_shutter)
 				return -EINVAL;
 
@@ -1794,7 +1810,7 @@ static int ov5640_set_mode(struct ov5640_dev *sensor)
 	const struct ov5640_mode_info *orig_mode = sensor->last_mode;
 	enum ov5640_downsize_mode dn_mode, orig_dn_mode;
 	bool auto_gain = sensor->ctrls.auto_gain->val == 1;
-	bool auto_exp =  sensor->ctrls.auto_exp->val == V4L2_EXPOSURE_AUTO;
+	bool auto_exp = sensor->ctrls.auto_exp->val == V4L2_EXPOSURE_AUTO;
 	unsigned long rate;
 	int ret;
 
@@ -1900,7 +1916,7 @@ static int ov5640_restore_mode(struct ov5640_dev *sensor)
 
 	ret = ov5640_mod_reg(sensor, OV5640_REG_SYS_ROOT_DIVIDER, 0x3f,
 			     (ilog2(OV5640_SCLK2X_ROOT_DIV) << 2) |
-			     ilog2(OV5640_SCLK_ROOT_DIV));
+				     ilog2(OV5640_SCLK_ROOT_DIV));
 	if (ret)
 		return ret;
 
@@ -1941,26 +1957,26 @@ static int ov5640_set_power_on(struct ov5640_dev *sensor)
 {
 	struct i2c_client *client = sensor->i2c_client;
 	int ret;
-
+	printk("fredy: %s  \n", __func__);
 	ret = clk_prepare_enable(sensor->xclk);
+	printk("fredy: %s clk_prepare_enable ret %d \n", __func__, ret);
 	if (ret) {
-		dev_err(&client->dev, "%s: failed to enable clock\n",
-			__func__);
+		dev_err(&client->dev, "%s: failed to enable clock\n", __func__);
 		return ret;
 	}
 
-	ret = regulator_bulk_enable(OV5640_NUM_SUPPLIES,
-				    sensor->supplies);
+	ret = regulator_bulk_enable(OV5640_NUM_SUPPLIES, sensor->supplies);
+	printk("fredy: %s regulator_bulk_enable ret %d \n", __func__, ret);
 	if (ret) {
 		dev_err(&client->dev, "%s: failed to enable regulators\n",
 			__func__);
 		goto xclk_off;
 	}
 
-	ov5640_reset(sensor);
-	ov5640_power(sensor, true);
+	//ov5640_reset(sensor);
+	//ov5640_power(sensor, true);
 
-	ret = ov5640_init_slave_id(sensor);
+	ret = 0; //ov5640_init_slave_id(sensor);
 	if (ret)
 		goto power_off;
 
@@ -1984,8 +2000,9 @@ static void ov5640_set_power_off(struct ov5640_dev *sensor)
 static int ov5640_set_power_mipi(struct ov5640_dev *sensor, bool on)
 {
 	int ret;
-
+	printk("fredy: %s  on  %d \n", __func__, on);
 	if (!on) {
+		printk("fredy: %s   0 on  %d \n", __func__, on);
 		/* Reset MIPI bus settings to their default values. */
 		ov5640_write_reg(sensor, OV5640_REG_IO_MIPI_CTRL00, 0x58);
 		ov5640_write_reg(sensor, OV5640_REG_MIPI_CTRL00, 0x04);
@@ -2004,6 +2021,7 @@ static int ov5640_set_power_mipi(struct ov5640_dev *sensor, bool on)
 	 * [2] = 0	: MIPI interface disabled
 	 */
 	ret = ov5640_write_reg(sensor, OV5640_REG_IO_MIPI_CTRL00, 0x40);
+	printk("fredy: %s  1 ret  %d \n", __func__, ret);
 	if (ret)
 		return ret;
 
@@ -2015,6 +2033,7 @@ static int ov5640_set_power_mipi(struct ov5640_dev *sensor, bool on)
 	 * [2] = 1	: MIPI bus in LP11 when 'no packets'
 	 */
 	ret = ov5640_write_reg(sensor, OV5640_REG_MIPI_CTRL00, 0x24);
+	printk("fredy: %s 2 ret  %d \n", __func__, ret);
 	if (ret)
 		return ret;
 
@@ -2027,6 +2046,7 @@ static int ov5640_set_power_mipi(struct ov5640_dev *sensor, bool on)
 	 * [4] = 1	: MIPI clock lane in LP11 when 'sleeping'
 	 */
 	ret = ov5640_write_reg(sensor, OV5640_REG_PAD_OUTPUT00, 0x70);
+	printk("fredy: %s  3 ret  %d \n", __func__, ret);
 	if (ret)
 		return ret;
 
@@ -2039,8 +2059,9 @@ static int ov5640_set_power_mipi(struct ov5640_dev *sensor, bool on)
 static int ov5640_set_power_dvp(struct ov5640_dev *sensor, bool on)
 {
 	int ret;
-
+	printk("fredy: %s   0 on  %d \n", __func__, on);
 	if (!on) {
+		printk("fredy: %s   1 on  %d \n", __func__, on);
 		/* Reset settings to their default values. */
 		ov5640_write_reg(sensor, OV5640_REG_PAD_OUTPUT_ENABLE01, 0x00);
 		ov5640_write_reg(sensor, OV5640_REG_PAD_OUTPUT_ENABLE02, 0x00);
@@ -2058,6 +2079,7 @@ static int ov5640_set_power_dvp(struct ov5640_dev *sensor, bool on)
 	 * - [3:0]:	D[9:6] output enable
 	 */
 	ret = ov5640_write_reg(sensor, OV5640_REG_PAD_OUTPUT_ENABLE01, 0x7f);
+	printk("fredy: %s  2 ret %d \n", __func__, ret);
 	if (ret)
 		return ret;
 
@@ -2073,30 +2095,37 @@ static int ov5640_set_power_dvp(struct ov5640_dev *sensor, bool on)
 static int ov5640_set_power(struct ov5640_dev *sensor, bool on)
 {
 	int ret = 0;
-
+	printk("fredy: %s   0 on  %d \n", __func__, on);
 	if (on) {
 		ret = ov5640_set_power_on(sensor);
+		printk("fredy: %s   ov5640_set_power_on  %d \n", __func__, ret);
 		if (ret)
 			return ret;
 
 		ret = ov5640_restore_mode(sensor);
+		printk("fredy: %s   ov5640_restore_mode  %d \n", __func__, ret);
 		if (ret)
 			goto power_off;
 	}
 
-	if (sensor->ep.bus_type == V4L2_MBUS_CSI2_DPHY)
+	if (sensor->ep.bus_type == V4L2_MBUS_CSI2_DPHY){
+		
 		ret = ov5640_set_power_mipi(sensor, on);
-	else
+		printk("fredy: %s   ov5640_set_power_mipi  %d \n", __func__, ret);
+	}else{
 		ret = ov5640_set_power_dvp(sensor, on);
+		printk("fredy: %s   ov5640_set_power_dvp  %d \n", __func__, ret);
+	}
 	if (ret)
 		goto power_off;
-
+	printk("fredy: %s   on  %d \n", __func__, on);
 	if (!on)
 		ov5640_set_power_off(sensor);
 
 	return 0;
 
 power_off:
+	printk("fredy--check: %s     %d \n", __func__, ret);
 	ov5640_set_power_off(sensor);
 	return ret;
 }
@@ -2115,7 +2144,7 @@ static int ov5640_s_power(struct v4l2_subdev *sd, int on)
 	 * update the power state.
 	 */
 	if (sensor->power_count == !on) {
-		ret = ov5640_set_power(sensor, !!on);
+		ret = 0; //ov5640_set_power(sensor, !!on);
 		if (ret)
 			goto out;
 	}
@@ -2135,8 +2164,8 @@ static int ov5640_s_power(struct v4l2_subdev *sd, int on)
 }
 
 static int ov5640_try_frame_interval(struct ov5640_dev *sensor,
-				     struct v4l2_fract *fi,
-				     u32 width, u32 height)
+				     struct v4l2_fract *fi, u32 width,
+				     u32 height)
 {
 	const struct ov5640_mode_info *mode;
 	enum ov5640_frame_rate rate = OV5640_15_FPS;
@@ -2187,8 +2216,7 @@ static int ov5640_get_fmt(struct v4l2_subdev *sd,
 	mutex_lock(&sensor->lock);
 
 	if (format->which == V4L2_SUBDEV_FORMAT_TRY)
-		fmt = v4l2_subdev_get_try_format(&sensor->sd, cfg,
-						 format->pad);
+		fmt = v4l2_subdev_get_try_format(&sensor->sd, cfg, format->pad);
 	else
 		fmt = &sensor->fmt;
 
@@ -2246,14 +2274,17 @@ static int ov5640_set_fmt(struct v4l2_subdev *sd,
 		return -EINVAL;
 
 	mutex_lock(&sensor->lock);
-
+	printk("fredy: ov5640_set_fmt : sensor->streaming %d \n ",
+	       sensor->streaming);
+	sensor->streaming = 0;
 	if (sensor->streaming) {
 		ret = -EBUSY;
 		goto out;
 	}
 
-	ret = ov5640_try_fmt_internal(sd, mbus_fmt,
-				      sensor->current_fr, &new_mode);
+	ret = ov5640_try_fmt_internal(sd, mbus_fmt, sensor->current_fr,
+				      &new_mode);
+	printk("fredy: ov5640_set_fmt : ov5640_try_fmt_internal %d \n ", ret);
 	if (ret)
 		goto out;
 
@@ -2350,8 +2381,8 @@ static int ov5640_set_framefmt(struct ov5640_dev *sensor,
 	 * TIMING TC REG21:
 	 * - [5]:	JPEG enable
 	 */
-	ret = ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG21,
-			     BIT(5), is_jpeg ? BIT(5) : 0);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG21, BIT(5),
+			     is_jpeg ? BIT(5) : 0);
 	if (ret)
 		return ret;
 
@@ -2373,8 +2404,7 @@ static int ov5640_set_framefmt(struct ov5640_dev *sensor,
 	 * - [3]:	Enable JPEG clock
 	 */
 	return ov5640_mod_reg(sensor, OV5640_REG_SYS_CLOCK_ENABLE02,
-			      BIT(5) | BIT(3),
-			      is_jpeg ? (BIT(5) | BIT(3)) : 0);
+			      BIT(5) | BIT(3), is_jpeg ? (BIT(5) | BIT(3)) : 0);
 }
 
 /*
@@ -2386,8 +2416,8 @@ static int ov5640_set_ctrl_hue(struct ov5640_dev *sensor, int value)
 	int ret;
 
 	if (value) {
-		ret = ov5640_mod_reg(sensor, OV5640_REG_SDE_CTRL0,
-				     BIT(0), BIT(0));
+		ret = ov5640_mod_reg(sensor, OV5640_REG_SDE_CTRL0, BIT(0),
+				     BIT(0));
 		if (ret)
 			return ret;
 		ret = ov5640_write_reg16(sensor, OV5640_REG_SDE_CTRL1, value);
@@ -2403,8 +2433,8 @@ static int ov5640_set_ctrl_contrast(struct ov5640_dev *sensor, int value)
 	int ret;
 
 	if (value) {
-		ret = ov5640_mod_reg(sensor, OV5640_REG_SDE_CTRL0,
-				     BIT(2), BIT(2));
+		ret = ov5640_mod_reg(sensor, OV5640_REG_SDE_CTRL0, BIT(2),
+				     BIT(2));
 		if (ret)
 			return ret;
 		ret = ov5640_write_reg(sensor, OV5640_REG_SDE_CTRL5,
@@ -2421,8 +2451,8 @@ static int ov5640_set_ctrl_saturation(struct ov5640_dev *sensor, int value)
 	int ret;
 
 	if (value) {
-		ret = ov5640_mod_reg(sensor, OV5640_REG_SDE_CTRL0,
-				     BIT(1), BIT(1));
+		ret = ov5640_mod_reg(sensor, OV5640_REG_SDE_CTRL0, BIT(1),
+				     BIT(1));
 		if (ret)
 			return ret;
 		ret = ov5640_write_reg(sensor, OV5640_REG_SDE_CTRL3,
@@ -2442,8 +2472,8 @@ static int ov5640_set_ctrl_white_balance(struct ov5640_dev *sensor, int awb)
 {
 	int ret;
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_AWB_MANUAL_CTRL,
-			     BIT(0), awb ? 0 : 1);
+	ret = ov5640_mod_reg(sensor, OV5640_REG_AWB_MANUAL_CTRL, BIT(0),
+			     awb ? 0 : 1);
 	if (ret)
 		return ret;
 
@@ -2510,7 +2540,7 @@ static int ov5640_set_ctrl_gain(struct ov5640_dev *sensor, bool auto_gain)
 	return ret;
 }
 
-static const char * const test_pattern_menu[] = {
+static const char *const test_pattern_menu[] = {
 	"Disabled",
 	"Color bars",
 	"Color bars w/ rolling bar",
@@ -2518,23 +2548,22 @@ static const char * const test_pattern_menu[] = {
 	"Color squares w/ rolling bar",
 };
 
-#define OV5640_TEST_ENABLE		BIT(7)
-#define OV5640_TEST_ROLLING		BIT(6)	/* rolling horizontal bar */
-#define OV5640_TEST_TRANSPARENT		BIT(5)
-#define OV5640_TEST_SQUARE_BW		BIT(4)	/* black & white squares */
-#define OV5640_TEST_BAR_STANDARD	(0 << 2)
-#define OV5640_TEST_BAR_VERT_CHANGE_1	(1 << 2)
-#define OV5640_TEST_BAR_HOR_CHANGE	(2 << 2)
-#define OV5640_TEST_BAR_VERT_CHANGE_2	(3 << 2)
-#define OV5640_TEST_BAR			(0 << 0)
-#define OV5640_TEST_RANDOM		(1 << 0)
-#define OV5640_TEST_SQUARE		(2 << 0)
-#define OV5640_TEST_BLACK		(3 << 0)
+#define OV5640_TEST_ENABLE BIT(7)
+#define OV5640_TEST_ROLLING BIT(6) /* rolling horizontal bar */
+#define OV5640_TEST_TRANSPARENT BIT(5)
+#define OV5640_TEST_SQUARE_BW BIT(4) /* black & white squares */
+#define OV5640_TEST_BAR_STANDARD (0 << 2)
+#define OV5640_TEST_BAR_VERT_CHANGE_1 (1 << 2)
+#define OV5640_TEST_BAR_HOR_CHANGE (2 << 2)
+#define OV5640_TEST_BAR_VERT_CHANGE_2 (3 << 2)
+#define OV5640_TEST_BAR (0 << 0)
+#define OV5640_TEST_RANDOM (1 << 0)
+#define OV5640_TEST_SQUARE (2 << 0)
+#define OV5640_TEST_BLACK (3 << 0)
 
 static const u8 test_pattern_val[] = {
 	0,
-	OV5640_TEST_ENABLE | OV5640_TEST_BAR_VERT_CHANGE_1 |
-		OV5640_TEST_BAR,
+	OV5640_TEST_ENABLE | OV5640_TEST_BAR_VERT_CHANGE_1 | OV5640_TEST_BAR,
 	OV5640_TEST_ENABLE | OV5640_TEST_ROLLING |
 		OV5640_TEST_BAR_VERT_CHANGE_1 | OV5640_TEST_BAR,
 	OV5640_TEST_ENABLE | OV5640_TEST_SQUARE,
@@ -2551,15 +2580,15 @@ static int ov5640_set_ctrl_light_freq(struct ov5640_dev *sensor, int value)
 {
 	int ret;
 
-	ret = ov5640_mod_reg(sensor, OV5640_REG_HZ5060_CTRL01, BIT(7),
-			     (value == V4L2_CID_POWER_LINE_FREQUENCY_AUTO) ?
-			     0 : BIT(7));
+	ret = ov5640_mod_reg(
+		sensor, OV5640_REG_HZ5060_CTRL01, BIT(7),
+		(value == V4L2_CID_POWER_LINE_FREQUENCY_AUTO) ? 0 : BIT(7));
 	if (ret)
 		return ret;
 
-	return ov5640_mod_reg(sensor, OV5640_REG_HZ5060_CTRL00, BIT(2),
-			      (value == V4L2_CID_POWER_LINE_FREQUENCY_50HZ) ?
-			      BIT(2) : 0);
+	return ov5640_mod_reg(
+		sensor, OV5640_REG_HZ5060_CTRL00, BIT(2),
+		(value == V4L2_CID_POWER_LINE_FREQUENCY_50HZ) ? BIT(2) : 0);
 }
 
 static int ov5640_set_ctrl_hflip(struct ov5640_dev *sensor, int value)
@@ -2578,10 +2607,9 @@ static int ov5640_set_ctrl_hflip(struct ov5640_dev *sensor, int value)
 	 * - [2]:	ISP mirror
 	 * - [1]:	Sensor mirror
 	 */
-	return ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG21,
-			      BIT(2) | BIT(1),
-			      (!(value ^ sensor->upside_down)) ?
-			      (BIT(2) | BIT(1)) : 0);
+	return ov5640_mod_reg(
+		sensor, OV5640_REG_TIMING_TC_REG21, BIT(2) | BIT(1),
+		(!(value ^ sensor->upside_down)) ? (BIT(2) | BIT(1)) : 0);
 }
 
 static int ov5640_set_ctrl_vflip(struct ov5640_dev *sensor, int value)
@@ -2593,10 +2621,9 @@ static int ov5640_set_ctrl_vflip(struct ov5640_dev *sensor, int value)
 	 * - [2]:	ISP vflip
 	 * - [1]:	Sensor vflip
 	 */
-	return ov5640_mod_reg(sensor, OV5640_REG_TIMING_TC_REG20,
-			      BIT(2) | BIT(1),
-			      (value ^ sensor->upside_down) ?
-			      (BIT(2) | BIT(1)) : 0);
+	return ov5640_mod_reg(
+		sensor, OV5640_REG_TIMING_TC_REG20, BIT(2) | BIT(1),
+		(value ^ sensor->upside_down) ? (BIT(2) | BIT(1)) : 0);
 }
 
 static int ov5640_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
@@ -2698,49 +2725,43 @@ static int ov5640_init_controls(struct ov5640_dev *sensor)
 	hdl->lock = &sensor->lock;
 
 	/* Clock related controls */
-	ctrls->pixel_rate = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_PIXEL_RATE,
-					      0, INT_MAX, 1,
-					      ov5640_calc_pixel_rate(sensor));
+	ctrls->pixel_rate =
+		v4l2_ctrl_new_std(hdl, ops, V4L2_CID_PIXEL_RATE, 0, INT_MAX, 1,
+				  ov5640_calc_pixel_rate(sensor));
 
 	/* Auto/manual white balance */
-	ctrls->auto_wb = v4l2_ctrl_new_std(hdl, ops,
-					   V4L2_CID_AUTO_WHITE_BALANCE,
-					   0, 1, 1, 1);
+	ctrls->auto_wb = v4l2_ctrl_new_std(
+		hdl, ops, V4L2_CID_AUTO_WHITE_BALANCE, 0, 1, 1, 1);
 	ctrls->blue_balance = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_BLUE_BALANCE,
 						0, 4095, 1, 0);
 	ctrls->red_balance = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_RED_BALANCE,
 					       0, 4095, 1, 0);
 	/* Auto/manual exposure */
-	ctrls->auto_exp = v4l2_ctrl_new_std_menu(hdl, ops,
-						 V4L2_CID_EXPOSURE_AUTO,
-						 V4L2_EXPOSURE_MANUAL, 0,
-						 V4L2_EXPOSURE_AUTO);
-	ctrls->exposure = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_EXPOSURE,
-					    0, 65535, 1, 0);
+	ctrls->auto_exp =
+		v4l2_ctrl_new_std_menu(hdl, ops, V4L2_CID_EXPOSURE_AUTO,
+				       V4L2_EXPOSURE_MANUAL, 0,
+				       V4L2_EXPOSURE_AUTO);
+	ctrls->exposure =
+		v4l2_ctrl_new_std(hdl, ops, V4L2_CID_EXPOSURE, 0, 65535, 1, 0);
 	/* Auto/manual gain */
-	ctrls->auto_gain = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_AUTOGAIN,
-					     0, 1, 1, 1);
-	ctrls->gain = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_GAIN,
-					0, 1023, 1, 0);
-
-	ctrls->saturation = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_SATURATION,
-					      0, 255, 1, 64);
-	ctrls->hue = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_HUE,
-				       0, 359, 1, 0);
-	ctrls->contrast = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_CONTRAST,
-					    0, 255, 1, 0);
+	ctrls->auto_gain =
+		v4l2_ctrl_new_std(hdl, ops, V4L2_CID_AUTOGAIN, 0, 1, 1, 1);
+	ctrls->gain = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_GAIN, 0, 1023, 1, 0);
+
+	ctrls->saturation =
+		v4l2_ctrl_new_std(hdl, ops, V4L2_CID_SATURATION, 0, 255, 1, 64);
+	ctrls->hue = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_HUE, 0, 359, 1, 0);
+	ctrls->contrast =
+		v4l2_ctrl_new_std(hdl, ops, V4L2_CID_CONTRAST, 0, 255, 1, 0);
 	ctrls->test_pattern =
 		v4l2_ctrl_new_std_menu_items(hdl, ops, V4L2_CID_TEST_PATTERN,
 					     ARRAY_SIZE(test_pattern_menu) - 1,
 					     0, 0, test_pattern_menu);
-	ctrls->hflip = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_HFLIP,
-					 0, 1, 1, 0);
-	ctrls->vflip = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_VFLIP,
-					 0, 1, 1, 0);
+	ctrls->hflip = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_HFLIP, 0, 1, 1, 0);
+	ctrls->vflip = v4l2_ctrl_new_std(hdl, ops, V4L2_CID_VFLIP, 0, 1, 1, 0);
 
 	ctrls->light_freq =
-		v4l2_ctrl_new_std_menu(hdl, ops,
-				       V4L2_CID_POWER_LINE_FREQUENCY,
+		v4l2_ctrl_new_std_menu(hdl, ops, V4L2_CID_POWER_LINE_FREQUENCY,
 				       V4L2_CID_POWER_LINE_FREQUENCY_AUTO, 0,
 				       V4L2_CID_POWER_LINE_FREQUENCY_50HZ);
 
@@ -2774,20 +2795,18 @@ static int ov5640_enum_frame_size(struct v4l2_subdev *sd,
 	if (fse->index >= OV5640_NUM_MODES)
 		return -EINVAL;
 
-	fse->min_width =
-		ov5640_mode_data[fse->index].hact;
+	fse->min_width = ov5640_mode_data[fse->index].hact;
 	fse->max_width = fse->min_width;
-	fse->min_height =
-		ov5640_mode_data[fse->index].vact;
+	fse->min_height = ov5640_mode_data[fse->index].vact;
 	fse->max_height = fse->min_height;
 
 	return 0;
 }
 
-static int ov5640_enum_frame_interval(
-	struct v4l2_subdev *sd,
-	struct v4l2_subdev_pad_config *cfg,
-	struct v4l2_subdev_frame_interval_enum *fie)
+static int
+ov5640_enum_frame_interval(struct v4l2_subdev *sd,
+			   struct v4l2_subdev_pad_config *cfg,
+			   struct v4l2_subdev_frame_interval_enum *fie)
 {
 	struct ov5640_dev *sensor = to_ov5640_dev(sd);
 	struct v4l2_fract tpf;
@@ -2801,8 +2820,7 @@ static int ov5640_enum_frame_interval(
 	tpf.numerator = 1;
 	tpf.denominator = ov5640_framerates[fie->index];
 
-	ret = ov5640_try_frame_interval(sensor, &tpf,
-					fie->width, fie->height);
+	ret = ov5640_try_frame_interval(sensor, &tpf, fie->width, fie->height);
 	if (ret < 0)
 		return -EINVAL;
 
@@ -2849,15 +2867,14 @@ static int ov5640_s_frame_interval(struct v4l2_subdev *sd,
 		goto out;
 	}
 
-	mode = ov5640_find_mode(sensor, frame_rate, mode->hact,
-				mode->vact, true);
+	mode = ov5640_find_mode(sensor, frame_rate, mode->hact, mode->vact,
+				true);
 	if (!mode) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	if (mode != sensor->current_mode ||
-	    frame_rate != sensor->current_fr) {
+	if (mode != sensor->current_mode || frame_rate != sensor->current_fr) {
 		sensor->current_fr = frame_rate;
 		sensor->frame_interval = fi->interval;
 		sensor->current_mode = mode;
@@ -2890,10 +2907,12 @@ static int ov5640_s_stream(struct v4l2_subdev *sd, int enable)
 	int ret = 0;
 
 	mutex_lock(&sensor->lock);
+    printk("fredy : ov5640_s_stream : sensor->streaming %d \n ", enable);
 
 	if (sensor->streaming == !enable) {
 		if (enable && sensor->pending_mode_change) {
 			ret = ov5640_set_mode(sensor);
+            printk("fredy : ov5640_s_stream : set mode ret %d \n ", enable);
 			if (ret)
 				goto out;
 		}
@@ -2905,13 +2924,20 @@ static int ov5640_s_stream(struct v4l2_subdev *sd, int enable)
 			sensor->pending_fmt_change = false;
 		}
 
-		if (sensor->ep.bus_type == V4L2_MBUS_CSI2_DPHY)
-			ret = ov5640_set_stream_mipi(sensor, enable);
-		else
+		if (sensor->ep.bus_type == V4L2_MBUS_CSI2_DPHY){
+			printk("fredy : ov5640_s_stream : ov5640_set_stream_mipi enable %d, ret %d \n ", enable, ret);
+            ret =  ov5640_set_stream_mipi(sensor, enable);
+            printk("fredy : ov5640_s_stream : ov5640_set_stream_mipi enable %d done ret %d  \n ", enable, ret);
+        }else{
+            printk("fredy : ov5640_s_stream : ov5640_set_stream_dvp enable %d  ret %d\n ", enable, ret);
 			ret = ov5640_set_stream_dvp(sensor, enable);
+            printk("fredy : ov5640_s_stream : ov5640_set_stream_dvp enable %d done ret %d \n ", enable, ret);
+        }
 
-		if (!ret)
+		if (!ret){
 			sensor->streaming = enable;
+            printk("fredy : ov5640_s_stream : stream enable done \n ", enable);
+        }
 	}
 out:
 	mutex_unlock(&sensor->lock);
@@ -2953,8 +2979,7 @@ static int ov5640_get_regulators(struct ov5640_dev *sensor)
 		sensor->supplies[i].supply = ov5640_supply_name[i];
 
 	return devm_regulator_bulk_get(&sensor->i2c_client->dev,
-				       OV5640_NUM_SUPPLIES,
-				       sensor->supplies);
+				       OV5640_NUM_SUPPLIES, sensor->supplies);
 }
 
 static int ov5640_check_chip_id(struct ov5640_dev *sensor)
@@ -2975,7 +3000,8 @@ static int ov5640_check_chip_id(struct ov5640_dev *sensor)
 	}
 
 	if (chip_id != 0x5640) {
-		dev_err(&client->dev, "%s: wrong chip identifier, expected 0x5640, got 0x%x\n",
+		dev_err(&client->dev,
+			"%s: wrong chip identifier, expected 0x5640, got 0x%x\n",
 			__func__, chip_id);
 		ret = -ENXIO;
 	}
@@ -3016,8 +3042,7 @@ static int ov5640_probe(struct i2c_client *client)
 	sensor->frame_interval.numerator = 1;
 	sensor->frame_interval.denominator = ov5640_framerates[OV5640_30_FPS];
 	sensor->current_fr = OV5640_30_FPS;
-	sensor->current_mode =
-		&ov5640_mode_data[OV5640_MODE_VGA_640_480];
+	sensor->current_mode = &ov5640_mode_data[OV5640_MODE_VGA_640_480];
 	sensor->last_mode = sensor->current_mode;
 
 	sensor->ae_target = 52;
@@ -3033,13 +3058,15 @@ static int ov5640_probe(struct i2c_client *client)
 		case 0:
 			break;
 		default:
-			dev_warn(dev, "%u degrees rotation is not supported, ignoring...\n",
-				 rotation);
+			dev_warn(
+				dev,
+				"%u degrees rotation is not supported, ignoring...\n",
+				rotation);
 		}
 	}
 
-	endpoint = fwnode_graph_get_next_endpoint(dev_fwnode(&client->dev),
-						  NULL);
+	endpoint =
+		fwnode_graph_get_next_endpoint(dev_fwnode(&client->dev), NULL);
 	if (!endpoint) {
 		dev_err(dev, "endpoint node not found\n");
 		return -EINVAL;
@@ -3068,42 +3095,47 @@ static int ov5640_probe(struct i2c_client *client)
 	}
 
 	/* request optional power down pin */
-	sensor->pwdn_gpio = devm_gpiod_get_optional(dev, "powerdown",
-						    GPIOD_OUT_HIGH);
+	sensor->pwdn_gpio =
+		devm_gpiod_get_optional(dev, "powerdown", GPIOD_OUT_HIGH);
 	if (IS_ERR(sensor->pwdn_gpio))
 		return PTR_ERR(sensor->pwdn_gpio);
 
 	/* request optional reset pin */
-	sensor->reset_gpio = devm_gpiod_get_optional(dev, "reset",
-						     GPIOD_OUT_HIGH);
+	sensor->reset_gpio =
+		devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
 	if (IS_ERR(sensor->reset_gpio))
 		return PTR_ERR(sensor->reset_gpio);
 
 	v4l2_i2c_subdev_init(&sensor->sd, client, &ov5640_subdev_ops);
 
-	sensor->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE |
-			    V4L2_SUBDEV_FL_HAS_EVENTS;
+	sensor->sd.flags |=
+		V4L2_SUBDEV_FL_HAS_DEVNODE | V4L2_SUBDEV_FL_HAS_EVENTS;
 	sensor->pad.flags = MEDIA_PAD_FL_SOURCE;
 	sensor->sd.entity.function = MEDIA_ENT_F_CAM_SENSOR;
 	ret = media_entity_pads_init(&sensor->sd.entity, 1, &sensor->pad);
+	printk("fredy probe 0 : return %d \n", ret);
 	if (ret)
 		return ret;
 
 	ret = ov5640_get_regulators(sensor);
+	printk("fredy probe 1 : return %d \n", ret);
 	if (ret)
 		return ret;
 
 	mutex_init(&sensor->lock);
 
-	ret = ov5640_check_chip_id(sensor);
+	ret = 0; //ov5640_check_chip_id(sensor);
+	printk("fredy probe 2 : return %d \n", ret);
 	if (ret)
 		goto entity_cleanup;
 
 	ret = ov5640_init_controls(sensor);
+	printk("fredy probe 3 : return %d \n", ret);
 	if (ret)
 		goto entity_cleanup;
 
 	ret = v4l2_async_register_subdev_sensor_common(&sensor->sd);
+	printk("fredy probe 4 : return %d \n", ret);
 	if (ret)
 		goto free_ctrls;
 
@@ -3131,15 +3163,14 @@ static int ov5640_remove(struct i2c_client *client)
 }
 
 static const struct i2c_device_id ov5640_id[] = {
-	{"ov5640", 0},
+	{ "ov5640", 0 },
 	{},
 };
 MODULE_DEVICE_TABLE(i2c, ov5640_id);
 
-static const struct of_device_id ov5640_dt_ids[] = {
-	{ .compatible = "ovti,ov5640" },
-	{ /* sentinel */ }
-};
+static const struct of_device_id ov5640_dt_ids[] = { { .compatible =
+							       "ovti,ov5640" },
+						     { /* sentinel */ } };
 MODULE_DEVICE_TABLE(of, ov5640_dt_ids);
 
 static struct i2c_driver ov5640_i2c_driver = {
diff --git a/drivers/media/platform/cadence/cdns-csi2rx.c b/drivers/media/platform/cadence/cdns-csi2rx.c
index e01b5465a..6de3faedc 100644
--- a/drivers/media/platform/cadence/cdns-csi2rx.c
+++ b/drivers/media/platform/cadence/cdns-csi2rx.c
@@ -162,6 +162,7 @@ static void csi2rx_reset(struct csi2rx_priv *csi2rx)
 	       csi2rx->base + CSI2RX_SOFT_RESET_REG);
 
 	udelay(10);
+    printk("fredy: csi2rx reset \n");
 
 	writel(0, csi2rx->base + CSI2RX_SOFT_RESET_REG);
 
@@ -229,19 +230,19 @@ static int csi2rx_start(struct csi2rx_priv *csi2rx)
 	unsigned long lanes_used = 0;
 	u32 reg;
 	int ret;
-
+    printk("fredy : csi2rx start \n");
 	ret = clk_prepare_enable(csi2rx->p_clk);
 	if (ret)
 		return ret;
-
+    printk("fredy : csi2rx start: enable clock \n");
 	csi2rx_reset(csi2rx);
-
+    printk("fredy : csi2rx start: reset  \n");
 	reg = csi2rx->num_lanes << 8;
 	for (i = 0; i < csi2rx->num_lanes; i++) {
 		reg |= CSI2RX_STATIC_CFG_DLANE_MAP(i, csi2rx->lanes[i]);
 		set_bit(csi2rx->lanes[i], &lanes_used);
 	}
-
+    printk("fredy : csi2rx start: lane number %d  \n",csi2rx->num_lanes);
 	/*
 	 * Even the unused lanes need to be mapped. In order to avoid
 	 * to map twice to the same physical lane, keep the lanes used
@@ -266,13 +267,16 @@ static int csi2rx_start(struct csi2rx_priv *csi2rx)
 		}
 
 		writel(reg, csi2rx->base + CSI2RX_DPHY_LANE_CTRL_REG);
+        printk("fredy: LANE CTRL REG : 0x%08x \n", ( CSI2RX_DPHY_LANE_CTRL_REG));
 	}
 
 	ret = v4l2_subdev_call(csi2rx->source_subdev, core, s_power, true);
+	printk("fredy: v4l2_subdev_call 0 ret %d \n", ret);
 	if (ret)
 		goto err_disable_pclk;
 
 	ret = v4l2_subdev_call(csi2rx->source_subdev, video, s_stream, true);
+	printk("fredy: v4l2_subdev_call 1 ret %d \n", ret);
 	if (ret)
 		goto err_disable_pclk;
 
@@ -303,6 +307,7 @@ static int csi2rx_start(struct csi2rx_priv *csi2rx)
 
 		writel(CSI2RX_STREAM_CTRL_START,
 		       csi2rx->base + CSI2RX_STREAM_CTRL_REG(i));
+        printk("fredy: stream ctrl start %x, %d \n", csi2rx->base + CSI2RX_STREAM_CTRL_REG(i), CSI2RX_STREAM_CTRL_START);
 	}
 
 	ret = clk_prepare_enable(csi2rx->sys_clk);
@@ -339,7 +344,7 @@ static void csi2rx_stop(struct csi2rx_priv *csi2rx)
 	unsigned int i;
 	u32 val;
 	int ret;
-
+    printk("fredy: csi2rx stop \n");
 	clk_prepare_enable(csi2rx->p_clk);
 	clk_disable_unprepare(csi2rx->sys_clk);
 
@@ -381,7 +386,7 @@ static int csi2rx_s_stream(struct v4l2_subdev *subdev, int enable)
 	int ret = 0;
 
 	mutex_lock(&csi2rx->lock);
-
+    printk("fredy: csi2rx_start stream: csi2rx(count) %d : enable %d \n ", csi2rx->count, enable );
 	if (enable) {
 		/*
 		 * If we're not the first users, there's no need to
@@ -389,6 +394,7 @@ static int csi2rx_s_stream(struct v4l2_subdev *subdev, int enable)
 		 */
 		if (!csi2rx->count) {
 			ret = csi2rx_start(csi2rx);
+            printk("fredy: csi2rx_start stream : start %d \n ");
 			if (ret)
 				goto out;
 		}
@@ -402,6 +408,7 @@ static int csi2rx_s_stream(struct v4l2_subdev *subdev, int enable)
 		 */
 		if (!csi2rx->count)
 			csi2rx_stop(csi2rx);
+         printk("fredy: csi2rx_start stream : stop %d  \n ",csi2rx->count );
 	}
 
 out:
diff --git a/drivers/media/usb/dvb-usb/cxusb-analog.c b/drivers/media/usb/dvb-usb/cxusb-analog.c
index 0699f718d..1249a3d24 100644
--- a/drivers/media/usb/dvb-usb/cxusb-analog.c
+++ b/drivers/media/usb/dvb-usb/cxusb-analog.c
@@ -789,6 +789,7 @@ static int cxusb_medion_v_start_streaming(struct vb2_queue *q,
 	cxdev->field_order = cxusb_medion_field_order(cxdev);
 
 	ret = v4l2_subdev_call(cxdev->cx25840, video, s_stream, 1);
+    printk("fredy  start streaming : %d \n", ret);
 	if (ret != 0) {
 		dev_err(&dvbdev->udev->dev,
 			"unable to start stream (%d)\n", ret);
@@ -797,6 +798,7 @@ static int cxusb_medion_v_start_streaming(struct vb2_queue *q,
 
 	ret = cxusb_ctrl_msg(dvbdev, CMD_STREAMING_ON, streamon_params, 2,
 			     NULL, 0);
+    printk("fredy  start streaming 1: %d \n", ret);
 	if (ret != 0) {
 		dev_err(&dvbdev->udev->dev,
 			"unable to start streaming (%d)\n", ret);
-- 
2.17.1

